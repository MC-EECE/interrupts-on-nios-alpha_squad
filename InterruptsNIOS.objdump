
InterruptsNIOS.elf:     file format elf32-littlenios2
InterruptsNIOS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000042d0 memsz 0x000042d0 flags r-x
    LOAD off    0x000052f0 vaddr 0x000042f0 paddr 0x00005c84 align 2**12
         filesz 0x00001994 memsz 0x00001994 flags rw-
    LOAD off    0x00007618 vaddr 0x00007618 paddr 0x00007618 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003f24  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000184  0000416c  0000416c  0000516c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001994  000042f0  00005c84  000052f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00007618  00007618  00007618  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00007740  00007740  00006c84  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00006c84  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00006c84  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000006f8  00000000  00000000  00006ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000995d  00000000  00000000  000073a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000032c8  00000000  00000000  00010cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000371b  00000000  00000000  00013fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000013b8  00000000  00000000  000176e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002556  00000000  00000000  00018a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000770  00000000  00000000  0001afee  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0001b760  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000178  00000000  00000000  0001b780  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001e0e2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0001e0e5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001e0ea  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001e0eb  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001e0ec  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001e0f0  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001e0f4  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0001e0f8  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0001e101  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0001e10a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0001e113  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000059  00000000  00000000  0001e11e  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  0001e177  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001adce0  00000000  00000000  00028d3c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0000416c l    d  .rodata	00000000 .rodata
000042f0 l    d  .rwdata	00000000 .rwdata
00007618 l    d  .bss	00000000 .bss
00007740 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/thomas.oakes/Documents/FPGA/InterruptsNIOS_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 HexDisplay.c
00000000 l    df *ABS*	00000000 InterruptDemo.c
00007618 l     O .bss	00000004 count.1592
0000761c l     O .bss	00000004 pKey.1593
00000000 l    df *ABS*	00000000 buttonISR.c
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 seven_seg_bcd.c
00000000 l    df *ABS*	00000000 seven_seg_hex.c
00000000 l    df *ABS*	00000000 timerISR.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000c0c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000d74 l     F .text	00000038 alt_dev_reg
000042f0 l     O .rwdata	00001060 JTAG_UART
00005350 l     O .rwdata	00000030 AV_Config
00005380 l     O .rwdata	00000030 Audio_Subsystem_Audio
000053b0 l     O .rwdata	0000002c Char_LCD_16x2
000053dc l     O .rwdata	0000002c IrDA
00005408 l     O .rwdata	0000002c Expansion_JP5
00005434 l     O .rwdata	0000002c Green_LEDs
00005460 l     O .rwdata	0000002c HEX3_HEX0
0000548c l     O .rwdata	0000002c HEX7_HEX4
000054b8 l     O .rwdata	0000002c Pushbuttons
000054e4 l     O .rwdata	0000002c Red_LEDs
00005510 l     O .rwdata	0000002c Slider_Switches
0000553c l     O .rwdata	00000038 PS2_Port
00005574 l     O .rwdata	00000038 PS2_Port_Dual
000055ac l     O .rwdata	0000002c Serial_Port
000055d8 l     O .rwdata	00000034 USB
0000560c l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00005660 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00001328 l     F .text	00000210 altera_avalon_jtag_uart_irq
00001538 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001b78 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00003088 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000031c8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000031f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000346c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000035ac l     F .text	00000050 alt_get_errno
000035fc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00005834 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00007638 g     O .bss	00000004 alt_instruction_exception_handler
00000cf8 g     F .text	0000007c alt_main
0000274c g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00007640 g     O .bss	00000100 alt_irq
00000284 g     F .text	00000048 HexDisplay
00005c84 g       *ABS*	00000000 __flash_rwdata_start
00001cec g     F .text	00000040 alt_up_character_lcd_send_cmd
00002564 g     F .text	00000034 read_CE_bit
000028ec g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
00002de4 g     F .text	00000090 alt_up_rs232_read_fd
00000384 g     F .text	0000006c LCD_cursor
00003a28 g     F .text	00000024 altera_nios2_gen2_irq_init
00001c78 g     F .text	00000074 get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000763c g     O .bss	00000004 errno
00007628 g     O .bss	00000004 alt_argv
0000dc58 g       *ABS*	00000000 _gp
000056b4 g     O .rwdata	00000180 alt_fd_list
000033a8 g     F .text	00000090 alt_find_dev
00000914 g     F .text	00000148 memcpy
00001e98 g     F .text	00000050 alt_up_character_lcd_write_fd
00003530 g     F .text	0000007c alt_io_redirect
0000416c g       *ABS*	00000000 __DTOR_END__
00002430 g     F .text	00000090 alt_up_irda_write_fd
00002d70 g     F .text	00000074 alt_up_rs232_read_data
00003ca4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000222c g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00001738 g     F .text	0000021c altera_avalon_jtag_uart_read
000003f0 g     F .text	0000006c LCD_text
000021cc g     F .text	00000060 alt_up_irda_disable_read_interrupt
00003c14 g     F .text	00000090 alt_icache_flush
00005c6c g     O .rwdata	00000004 alt_max_fd
00002cec g     F .text	00000044 alt_up_rs232_check_parity
00002598 g     F .text	00000030 read_num_bytes_available
00000a5c g     F .text	000001b0 alt_irq_register
00002500 g     F .text	00000034 read_RI_bit
00005c7c g     O .rwdata	00000004 _global_impure_ptr
00007740 g       *ABS*	00000000 __bss_end
00003920 g     F .text	00000108 alt_tick
000025fc g     F .text	0000002c read_data_byte
00003884 g     F .text	0000009c alt_alarm_stop
00002534 g     F .text	00000030 read_RE_bit
00007620 g     O .bss	00000004 alt_irq_active
0000226c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0000568c g     O .rwdata	00000028 alt_dev_null
00002138 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
000027ac g     F .text	00000074 alt_up_ps2_write_data_byte
000031a8 g     F .text	00000020 alt_dcache_flush_all
00005c84 g       *ABS*	00000000 __ram_rwdata_end
00005c64 g     O .rwdata	00000008 alt_dev_list
000042f0 g       *ABS*	00000000 __ram_rodata_end
00002e74 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00007740 g       *ABS*	00000000 end
00002adc g     F .text	00000098 alt_up_ps2_write_fd
000022a8 g     F .text	00000044 alt_up_irda_check_parity
0000126c g     F .text	000000bc altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0000416c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00001bf4 g     F .text	00000084 alt_avalon_timer_sc_init
00001954 g     F .text	00000224 altera_avalon_jtag_uart_write
00001da4 g     F .text	0000007c alt_up_character_lcd_write
00003fb8 g     F .text	00000180 __call_exitprocs
00000248 g     F .text	0000003c _start
00007630 g     O .bss	00000004 _alt_tick_rate
00007634 g     O .bss	00000004 _alt_nticks
00000de4 g     F .text	00000324 alt_sys_init
00001fe8 g     F .text	0000008c alt_up_character_lcd_shift_display
00000494 g     F .text	000002bc seven_seg_bcd
00003ea0 g     F .text	00000118 __register_exitproc
000029f8 g     F .text	00000058 alt_up_ps2_clear_fifo
00002cb0 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00002074 g     F .text	0000008c alt_up_character_lcd_erase_pos
000015e0 g     F .text	00000068 altera_avalon_jtag_uart_close
000042f0 g       *ABS*	00000000 __ram_rwdata_start
0000416c g       *ABS*	00000000 __ram_rodata_start
00001108 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00003b60 g     F .text	000000b4 alt_get_fd
00003d8c g     F .text	0000007c memcmp
000011c8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007740 g       *ABS*	00000000 __alt_stack_base
00001218 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002170 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00002c10 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00003a4c g     F .text	00000114 alt_find_file
00003244 g     F .text	000000a4 alt_dev_llist_insert
00007618 g       *ABS*	00000000 __bss_start
000002cc g     F .text	0000006c main
0000762c g     O .bss	00000004 alt_envp
00001168 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000045c g     F .text	00000038 LCD_cursor_off
00001f5c g     F .text	0000008c alt_up_character_lcd_shift_cursor
00002988 g     F .text	00000070 alt_up_ps2_read_data_byte
00005c70 g     O .rwdata	00000004 alt_errno
000022ec g     F .text	00000040 alt_up_irda_write_data
00002b74 g     F .text	00000040 alt_up_ps2_open_dev
00001d64 g     F .text	00000040 alt_up_character_lcd_open_dev
000026f0 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0000416c g       *ABS*	00000000 __CTOR_END__
00001d2c g     F .text	00000038 alt_up_character_lcd_init
0000416c g       *ABS*	00000000 __flash_rodata_start
0000416c g       *ABS*	00000000 __DTOR_LIST__
00002f08 g     F .text	00000040 alt_up_rs232_open_dev
00000dac g     F .text	00000038 alt_irq_init
00003820 g     F .text	00000064 alt_release_fd
000025c8 g     F .text	00000034 read_data_valid
00002100 g     F .text	00000038 alt_up_character_lcd_cursor_off
00002888 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00003d40 g     F .text	00000014 atexit
00005c80 g     O .rwdata	00000004 _impure_ptr
00007624 g     O .bss	00000004 alt_argc
00003348 g     F .text	00000060 _do_dtors
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000020 g       .exceptions	00000000 alt_irq_entry
00005c5c g     O .rwdata	00000008 alt_fs_list
00002bb4 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
00002d30 g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000338 g     F .text	0000004c buttonISR
0000089c g     F .text	00000078 timerISR
00005c84 g       *ABS*	00000000 _edata
00007740 g       *ABS*	00000000 _end
00000248 g       *ABS*	00000000 __ram_exceptions_end
00001648 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00003d54 g     F .text	00000038 exit
0000232c g     F .text	00000074 alt_up_irda_read_data
00002628 g     F .text	000000c8 alt_up_ps2_init
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001e20 g     F .text	00000078 alt_up_character_lcd_string
000024c0 g     F .text	00000040 alt_up_irda_open_dev
00004138 g     F .text	00000034 _exit
00002f48 g     F .text	00000140 alt_alarm_start
00002820 g     F .text	00000068 alt_up_ps2_wait_for_ack
00000750 g     F .text	0000014c seven_seg_hex
00003e08 g     F .text	00000098 strlen
000036c8 g     F .text	00000158 open
00003438 g     F .text	00000034 alt_icache_flush_all
00001ee8 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00005c58 g     O .rwdata	00000004 alt_priority_mask
00002a50 g     F .text	0000008c alt_up_ps2_read_fd
000023a0 g     F .text	00000090 alt_up_irda_read_fd
00005c74 g     O .rwdata	00000008 alt_alarm_list
000032e8 g     F .text	00000060 _do_ctors
00002c70 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
000030d8 g     F .text	000000d0 close
00000c74 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800034 	movhi	r2,0
 140:	109d9004 	addi	r2,r2,30272
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800034 	movhi	r2,0
 158:	109d9004 	addi	r2,r2,30272
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a67817 	ldw	r2,-26144(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a67817 	ldw	r2,-26144(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     254:	d6b71614 	ori	gp,gp,56408
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     25c:	109d8614 	ori	r2,r2,30232

    movhi r3, %hi(__bss_end)
     260:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     264:	18ddd014 	ori	r3,r3,30528

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	0000c740 	call	c74 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	0000cf80 	call	cf8 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <HexDisplay>:


extern volatile alt_u8 leading_zeros;
extern volatile alt_u8 display_as_bcd;

void HexDisplay(alt_u32 * base, alt_u16 num) {
     284:	defffc04 	addi	sp,sp,-16
     288:	dfc00315 	stw	ra,12(sp)
     28c:	df000215 	stw	fp,8(sp)
     290:	df000204 	addi	fp,sp,8
     294:	e13ffe15 	stw	r4,-8(fp)
     298:	2805883a 	mov	r2,r5
     29c:	e0bfff0d 	sth	r2,-4(fp)
	//if (A=0) {seven_seg_bcd(base, num, 0);
	//}
	//else {
		seven_seg_hex(base, num, 0);
     2a0:	e0bfff0b 	ldhu	r2,-4(fp)
     2a4:	000d883a 	mov	r6,zero
     2a8:	100b883a 	mov	r5,r2
     2ac:	e13ffe17 	ldw	r4,-8(fp)
     2b0:	00007500 	call	750 <seven_seg_hex>
	//}
}
     2b4:	0001883a 	nop
     2b8:	e037883a 	mov	sp,fp
     2bc:	dfc00117 	ldw	ra,4(sp)
     2c0:	df000017 	ldw	fp,0(sp)
     2c4:	dec00204 	addi	sp,sp,8
     2c8:	f800283a 	ret

000002cc <main>:
 * int main()                                                                  *
 *                                                                             *
 ******************************************************************************/

int main(void)
{ 
     2cc:	defffc04 	addi	sp,sp,-16
     2d0:	dfc00315 	stw	ra,12(sp)
     2d4:	df000215 	stw	fp,8(sp)
     2d8:	df000204 	addi	fp,sp,8
    /* Setup */
	alt_u32 * pCount;
	static alt_u32 count = 0;
	static alt_u32 * pKey;
	alt_u32 Key = 0x10000050;
     2dc:	00840034 	movhi	r2,4096
     2e0:	10801404 	addi	r2,r2,80
     2e4:	e0bffe15 	stw	r2,-8(fp)

    /* Initialize Variables */
	pCount = &count;
     2e8:	d0a67004 	addi	r2,gp,-26176
     2ec:	e0bfff15 	stw	r2,-4(fp)
 /* 	pKey = &Key;
    /* Register ISRs
	alt_irq_register(1, (void*)pKey, buttonISR); */

	alt_irq_register(INTERVAL_TIMER_IRQ, (void*) pCount, timerISR);
     2f0:	01800034 	movhi	r6,0
     2f4:	31822704 	addi	r6,r6,2204
     2f8:	e17fff17 	ldw	r5,-4(fp)
     2fc:	0009883a 	mov	r4,zero
     300:	0000a5c0 	call	a5c <alt_irq_register>

    /* Initialize Timer */
	IOWR(INTERVAL_TIMER_BASE, 2, 0xFFFF&INTERVAL_TIMER_FREQ);
     304:	00fc2014 	movui	r3,61568
     308:	00840034 	movhi	r2,4096
     30c:	10880204 	addi	r2,r2,8200
     310:	10c00035 	stwio	r3,0(r2)
	IOWR(INTERVAL_TIMER_BASE, 3, 0xFFFF&(INTERVAL_TIMER_FREQ>>16));
     314:	00c0be84 	movi	r3,762
     318:	00840034 	movhi	r2,4096
     31c:	10880304 	addi	r2,r2,8204
     320:	10c00035 	stwio	r3,0(r2)

	IOWR(INTERVAL_TIMER_BASE,1, 0x7); //STOP=0, START=1, CONT=1, ITO=1;  0111=0x7
     324:	00c001c4 	movi	r3,7
     328:	00840034 	movhi	r2,4096
     32c:	10880104 	addi	r2,r2,8196
     330:	10c00035 	stwio	r3,0(r2)

    /* Loop while processing interrupts */
    while( 1 ) 
    {

    }
     334:	003fff06 	br	334 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000334>

00000338 <buttonISR>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void buttonISR(void* context)
#else
void buttonISR(void* context, alt_u32 id)
#endif
{
     338:	defffc04 	addi	sp,sp,-16
     33c:	df000315 	stw	fp,12(sp)
     340:	df000304 	addi	fp,sp,12
     344:	e13ffe15 	stw	r4,-8(fp)
     348:	e17fff15 	stw	r5,-4(fp)
	alt_u32* pCount = (alt_u32*)context;
     34c:	e0bffe17 	ldw	r2,-8(fp)
     350:	e0bffd15 	stw	r2,-12(fp)
     */

    /* Store the value in the PUSHBUTTONS's edge capture register in *context. */

    /* Reset the PUSHBUTTONS's edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(context, 0);
     354:	e0bffe17 	ldw	r2,-8(fp)
     358:	10800304 	addi	r2,r2,12
     35c:	0007883a 	mov	r3,zero
     360:	10c00035 	stwio	r3,0(r2)
    /*
     * Read the PIO to delay ISR exit. This is done to prevent a spurious
     * interrupt in systems with high processor -> pio latency and fast
     * interrupts.
     */
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(context);
     364:	e0bffe17 	ldw	r2,-8(fp)
     368:	10800304 	addi	r2,r2,12
     36c:	10800037 	ldwio	r2,0(r2)
}
     370:	0001883a 	nop
     374:	e037883a 	mov	sp,fp
     378:	df000017 	ldw	fp,0(sp)
     37c:	dec00104 	addi	sp,sp,4
     380:	f800283a 	ret

00000384 <LCD_cursor>:
#include "lcd.h"
/****************************************************************************************
 * Subroutine to move the LCD cursor
****************************************************************************************/
void LCD_cursor(int x, int y)
{
     384:	defffb04 	addi	sp,sp,-20
     388:	df000415 	stw	fp,16(sp)
     38c:	df000404 	addi	fp,sp,16
     390:	e13ffe15 	stw	r4,-8(fp)
     394:	e17fff15 	stw	r5,-4(fp)
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_16X2_BASE;	// 16x2 character display
     398:	00840034 	movhi	r2,4096
     39c:	108c1404 	addi	r2,r2,12368
     3a0:	e0bffd15 	stw	r2,-12(fp)
	char instruction;

	instruction = x;
     3a4:	e0bffe17 	ldw	r2,-8(fp)
     3a8:	e0bffc05 	stb	r2,-16(fp)
	if (y != 0) instruction |= 0x40;				// set bit 6 for bottom row
     3ac:	e0bfff17 	ldw	r2,-4(fp)
     3b0:	10000326 	beq	r2,zero,3c0 <LCD_cursor+0x3c>
     3b4:	e0bffc03 	ldbu	r2,-16(fp)
     3b8:	10801014 	ori	r2,r2,64
     3bc:	e0bffc05 	stb	r2,-16(fp)
	instruction |= 0x80;								// need to set bit 7 to set the cursor location
     3c0:	e0fffc03 	ldbu	r3,-16(fp)
     3c4:	00bfe004 	movi	r2,-128
     3c8:	1884b03a 	or	r2,r3,r2
     3cc:	e0bffc05 	stb	r2,-16(fp)
	*(LCD_display_ptr) = instruction;			// write to the LCD instruction register
     3d0:	e0bffd17 	ldw	r2,-12(fp)
     3d4:	e0fffc03 	ldbu	r3,-16(fp)
     3d8:	10c00005 	stb	r3,0(r2)
}
     3dc:	0001883a 	nop
     3e0:	e037883a 	mov	sp,fp
     3e4:	df000017 	ldw	fp,0(sp)
     3e8:	dec00104 	addi	sp,sp,4
     3ec:	f800283a 	ret

000003f0 <LCD_text>:

/****************************************************************************************
 * Subroutine to send a string of text to the LCD
****************************************************************************************/
void LCD_text(char * text_ptr)
{
     3f0:	defffd04 	addi	sp,sp,-12
     3f4:	df000215 	stw	fp,8(sp)
     3f8:	df000204 	addi	fp,sp,8
     3fc:	e13fff15 	stw	r4,-4(fp)

  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_16X2_BASE;	// 16x2 character display
     400:	00840034 	movhi	r2,4096
     404:	108c1404 	addi	r2,r2,12368
     408:	e0bffe15 	stw	r2,-8(fp)

	while ( *(text_ptr) )
     40c:	00000806 	br	430 <LCD_text+0x40>
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
     410:	e0bffe17 	ldw	r2,-8(fp)
     414:	10800044 	addi	r2,r2,1
     418:	e0ffff17 	ldw	r3,-4(fp)
     41c:	18c00003 	ldbu	r3,0(r3)
     420:	10c00005 	stb	r3,0(r2)
		++text_ptr;
     424:	e0bfff17 	ldw	r2,-4(fp)
     428:	10800044 	addi	r2,r2,1
     42c:	e0bfff15 	stw	r2,-4(fp)
void LCD_text(char * text_ptr)
{

  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_16X2_BASE;	// 16x2 character display

	while ( *(text_ptr) )
     430:	e0bfff17 	ldw	r2,-4(fp)
     434:	10800003 	ldbu	r2,0(r2)
     438:	10803fcc 	andi	r2,r2,255
     43c:	1080201c 	xori	r2,r2,128
     440:	10bfe004 	addi	r2,r2,-128
     444:	103ff21e 	bne	r2,zero,410 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000410>
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
		++text_ptr;
	}
}
     448:	0001883a 	nop
     44c:	e037883a 	mov	sp,fp
     450:	df000017 	ldw	fp,0(sp)
     454:	dec00104 	addi	sp,sp,4
     458:	f800283a 	ret

0000045c <LCD_cursor_off>:

/****************************************************************************************
 * Subroutine to turn off the LCD cursor
****************************************************************************************/
void LCD_cursor_off(void)
{
     45c:	defffe04 	addi	sp,sp,-8
     460:	df000115 	stw	fp,4(sp)
     464:	df000104 	addi	fp,sp,4
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_16X2_BASE;	// 16x2 character display
     468:	00840034 	movhi	r2,4096
     46c:	108c1404 	addi	r2,r2,12368
     470:	e0bfff15 	stw	r2,-4(fp)
	*(LCD_display_ptr) = 0x0C;											// turn off the LCD cursor
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	00c00304 	movi	r3,12
     47c:	10c00005 	stb	r3,0(r2)
}
     480:	0001883a 	nop
     484:	e037883a 	mov	sp,fp
     488:	df000017 	ldw	fp,0(sp)
     48c:	dec00104 	addi	sp,sp,4
     490:	f800283a 	ret

00000494 <seven_seg_bcd>:
 */
//#include "system.h"
//#include "io.h"
#include "alt_types.h"

void seven_seg_bcd(alt_u32* base, alt_u16 num, alt_u8 leading_zeros) {
     494:	defff304 	addi	sp,sp,-52
     498:	df000c15 	stw	fp,48(sp)
     49c:	df000c04 	addi	fp,sp,48
     4a0:	e13ffd15 	stw	r4,-12(fp)
     4a4:	2807883a 	mov	r3,r5
     4a8:	3005883a 	mov	r2,r6
     4ac:	e0fffe0d 	sth	r3,-8(fp)
     4b0:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 bcd[4];// = {0, 0, 0, 0};
	int i, j;

	alt_u8 BCD_CODES[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67};
     4b4:	00800fc4 	movi	r2,63
     4b8:	e0bffa05 	stb	r2,-24(fp)
     4bc:	00800184 	movi	r2,6
     4c0:	e0bffa45 	stb	r2,-23(fp)
     4c4:	008016c4 	movi	r2,91
     4c8:	e0bffa85 	stb	r2,-22(fp)
     4cc:	008013c4 	movi	r2,79
     4d0:	e0bffac5 	stb	r2,-21(fp)
     4d4:	00801984 	movi	r2,102
     4d8:	e0bffb05 	stb	r2,-20(fp)
     4dc:	00801b44 	movi	r2,109
     4e0:	e0bffb45 	stb	r2,-19(fp)
     4e4:	00801f44 	movi	r2,125
     4e8:	e0bffb85 	stb	r2,-18(fp)
     4ec:	008001c4 	movi	r2,7
     4f0:	e0bffbc5 	stb	r2,-17(fp)
     4f4:	00801fc4 	movi	r2,127
     4f8:	e0bffc05 	stb	r2,-16(fp)
     4fc:	008019c4 	movi	r2,103
     500:	e0bffc45 	stb	r2,-15(fp)

	bcd[3] = 0;
     504:	e03ff9c5 	stb	zero,-25(fp)
	bcd[2] = 0;
     508:	e03ff985 	stb	zero,-26(fp)
	bcd[1] = 0;
     50c:	e03ff945 	stb	zero,-27(fp)
	bcd[0] = 0;
     510:	e03ff905 	stb	zero,-28(fp)

	for (i=0; i<8; i++) {
     514:	e03ff415 	stw	zero,-48(fp)
     518:	00005906 	br	680 <seven_seg_bcd+0x1ec>
		// check all columns for >= 5
		bcd[3] += (bcd[3] >= 5)?3:0;
     51c:	e0fff9c3 	ldbu	r3,-25(fp)
     520:	e0bff9c3 	ldbu	r2,-25(fp)
     524:	10803fcc 	andi	r2,r2,255
     528:	10800170 	cmpltui	r2,r2,5
     52c:	1000021e 	bne	r2,zero,538 <seven_seg_bcd+0xa4>
     530:	008000c4 	movi	r2,3
     534:	00000106 	br	53c <seven_seg_bcd+0xa8>
     538:	0005883a 	mov	r2,zero
     53c:	1885883a 	add	r2,r3,r2
     540:	e0bff9c5 	stb	r2,-25(fp)
		bcd[2] += (bcd[2] >= 5)?3:0;
     544:	e0fff983 	ldbu	r3,-26(fp)
     548:	e0bff983 	ldbu	r2,-26(fp)
     54c:	10803fcc 	andi	r2,r2,255
     550:	10800170 	cmpltui	r2,r2,5
     554:	1000021e 	bne	r2,zero,560 <seven_seg_bcd+0xcc>
     558:	008000c4 	movi	r2,3
     55c:	00000106 	br	564 <seven_seg_bcd+0xd0>
     560:	0005883a 	mov	r2,zero
     564:	1885883a 	add	r2,r3,r2
     568:	e0bff985 	stb	r2,-26(fp)
		bcd[1] += (bcd[1] >= 5)?3:0;
     56c:	e0fff943 	ldbu	r3,-27(fp)
     570:	e0bff943 	ldbu	r2,-27(fp)
     574:	10803fcc 	andi	r2,r2,255
     578:	10800170 	cmpltui	r2,r2,5
     57c:	1000021e 	bne	r2,zero,588 <seven_seg_bcd+0xf4>
     580:	008000c4 	movi	r2,3
     584:	00000106 	br	58c <seven_seg_bcd+0xf8>
     588:	0005883a 	mov	r2,zero
     58c:	1885883a 	add	r2,r3,r2
     590:	e0bff945 	stb	r2,-27(fp)
		bcd[0] += (bcd[0] >= 5)?3:0;
     594:	e0fff903 	ldbu	r3,-28(fp)
     598:	e0bff903 	ldbu	r2,-28(fp)
     59c:	10803fcc 	andi	r2,r2,255
     5a0:	10800170 	cmpltui	r2,r2,5
     5a4:	1000021e 	bne	r2,zero,5b0 <seven_seg_bcd+0x11c>
     5a8:	008000c4 	movi	r2,3
     5ac:	00000106 	br	5b4 <seven_seg_bcd+0x120>
     5b0:	0005883a 	mov	r2,zero
     5b4:	1885883a 	add	r2,r3,r2
     5b8:	e0bff905 	stb	r2,-28(fp)
		bcd[3] = ((bcd[3] << 1) & 0xE) + ((bcd[2] & 0x8) >> 3);
     5bc:	e0bff9c3 	ldbu	r2,-25(fp)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	1085883a 	add	r2,r2,r2
     5c8:	1080038c 	andi	r2,r2,14
     5cc:	1007883a 	mov	r3,r2
     5d0:	e0bff983 	ldbu	r2,-26(fp)
     5d4:	10803fcc 	andi	r2,r2,255
     5d8:	1080020c 	andi	r2,r2,8
     5dc:	1005d0fa 	srai	r2,r2,3
     5e0:	1885883a 	add	r2,r3,r2
     5e4:	e0bff9c5 	stb	r2,-25(fp)
		bcd[2] = ((bcd[2] << 1) & 0xE) + ((bcd[1] & 0x8) >> 3);
     5e8:	e0bff983 	ldbu	r2,-26(fp)
     5ec:	10803fcc 	andi	r2,r2,255
     5f0:	1085883a 	add	r2,r2,r2
     5f4:	1080038c 	andi	r2,r2,14
     5f8:	1007883a 	mov	r3,r2
     5fc:	e0bff943 	ldbu	r2,-27(fp)
     600:	10803fcc 	andi	r2,r2,255
     604:	1080020c 	andi	r2,r2,8
     608:	1005d0fa 	srai	r2,r2,3
     60c:	1885883a 	add	r2,r3,r2
     610:	e0bff985 	stb	r2,-26(fp)
		bcd[1] = ((bcd[1] << 1) & 0xE) + ((bcd[0] & 0x8) >> 3);
     614:	e0bff943 	ldbu	r2,-27(fp)
     618:	10803fcc 	andi	r2,r2,255
     61c:	1085883a 	add	r2,r2,r2
     620:	1080038c 	andi	r2,r2,14
     624:	1007883a 	mov	r3,r2
     628:	e0bff903 	ldbu	r2,-28(fp)
     62c:	10803fcc 	andi	r2,r2,255
     630:	1080020c 	andi	r2,r2,8
     634:	1005d0fa 	srai	r2,r2,3
     638:	1885883a 	add	r2,r3,r2
     63c:	e0bff945 	stb	r2,-27(fp)
		bcd[0] = ((bcd[0] << 1) & 0xE) + ((num & 0x80) >> 7);
     640:	e0bff903 	ldbu	r2,-28(fp)
     644:	10803fcc 	andi	r2,r2,255
     648:	1085883a 	add	r2,r2,r2
     64c:	1080038c 	andi	r2,r2,14
     650:	1007883a 	mov	r3,r2
     654:	e0bffe0b 	ldhu	r2,-8(fp)
     658:	1080200c 	andi	r2,r2,128
     65c:	1005d1fa 	srai	r2,r2,7
     660:	1885883a 	add	r2,r3,r2
     664:	e0bff905 	stb	r2,-28(fp)
		num <<= 1;
     668:	e0bffe0b 	ldhu	r2,-8(fp)
     66c:	1085883a 	add	r2,r2,r2
     670:	e0bffe0d 	sth	r2,-8(fp)
	bcd[3] = 0;
	bcd[2] = 0;
	bcd[1] = 0;
	bcd[0] = 0;

	for (i=0; i<8; i++) {
     674:	e0bff417 	ldw	r2,-48(fp)
     678:	10800044 	addi	r2,r2,1
     67c:	e0bff415 	stw	r2,-48(fp)
     680:	e0bff417 	ldw	r2,-48(fp)
     684:	10800210 	cmplti	r2,r2,8
     688:	103fa41e 	bne	r2,zero,51c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700051c>
		bcd[2] = ((bcd[2] << 1) & 0xE) + ((bcd[1] & 0x8) >> 3);
		bcd[1] = ((bcd[1] << 1) & 0xE) + ((bcd[0] & 0x8) >> 3);
		bcd[0] = ((bcd[0] << 1) & 0xE) + ((num & 0x80) >> 7);
		num <<= 1;
	}
	alt_u8 trailing_zeros = 0;
     68c:	e03ff605 	stb	zero,-40(fp)
	int bcd_total = 0;
     690:	e03ff715 	stw	zero,-36(fp)
	int k = 24;
     694:	00800604 	movi	r2,24
     698:	e0bff815 	stw	r2,-32(fp)
	for (j=3; j>=0; j--) {
     69c:	008000c4 	movi	r2,3
     6a0:	e0bff515 	stw	r2,-44(fp)
     6a4:	00002006 	br	728 <seven_seg_bcd+0x294>
		if (leading_zeros || bcd[j] > 0 || trailing_zeros) {
     6a8:	e0bfff03 	ldbu	r2,-4(fp)
     6ac:	1000081e 	bne	r2,zero,6d0 <seven_seg_bcd+0x23c>
     6b0:	e0fff904 	addi	r3,fp,-28
     6b4:	e0bff517 	ldw	r2,-44(fp)
     6b8:	1885883a 	add	r2,r3,r2
     6bc:	10800003 	ldbu	r2,0(r2)
     6c0:	10803fcc 	andi	r2,r2,255
     6c4:	1000021e 	bne	r2,zero,6d0 <seven_seg_bcd+0x23c>
     6c8:	e0bff603 	ldbu	r2,-40(fp)
     6cc:	10001026 	beq	r2,zero,710 <seven_seg_bcd+0x27c>
			bcd_total += BCD_CODES[bcd[j]] << k;
     6d0:	e0fff904 	addi	r3,fp,-28
     6d4:	e0bff517 	ldw	r2,-44(fp)
     6d8:	1885883a 	add	r2,r3,r2
     6dc:	10800003 	ldbu	r2,0(r2)
     6e0:	10803fcc 	andi	r2,r2,255
     6e4:	e0fffa04 	addi	r3,fp,-24
     6e8:	1885883a 	add	r2,r3,r2
     6ec:	10800003 	ldbu	r2,0(r2)
     6f0:	10c03fcc 	andi	r3,r2,255
     6f4:	e0bff817 	ldw	r2,-32(fp)
     6f8:	1884983a 	sll	r2,r3,r2
     6fc:	e0fff717 	ldw	r3,-36(fp)
     700:	1885883a 	add	r2,r3,r2
     704:	e0bff715 	stw	r2,-36(fp)
			trailing_zeros = 1;
     708:	00800044 	movi	r2,1
     70c:	e0bff605 	stb	r2,-40(fp)
		}
		k -= 8;
     710:	e0bff817 	ldw	r2,-32(fp)
     714:	10bffe04 	addi	r2,r2,-8
     718:	e0bff815 	stw	r2,-32(fp)
		num <<= 1;
	}
	alt_u8 trailing_zeros = 0;
	int bcd_total = 0;
	int k = 24;
	for (j=3; j>=0; j--) {
     71c:	e0bff517 	ldw	r2,-44(fp)
     720:	10bfffc4 	addi	r2,r2,-1
     724:	e0bff515 	stw	r2,-44(fp)
     728:	e0bff517 	ldw	r2,-44(fp)
     72c:	103fde0e 	bge	r2,zero,6a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70006a8>
			trailing_zeros = 1;
		}
		k -= 8;
	}
	// Output the value by dereferencing the base address pointer
	*(base) = bcd_total;
     730:	e0fff717 	ldw	r3,-36(fp)
     734:	e0bffd17 	ldw	r2,-12(fp)
     738:	10c00015 	stw	r3,0(r2)
}
     73c:	0001883a 	nop
     740:	e037883a 	mov	sp,fp
     744:	df000017 	ldw	fp,0(sp)
     748:	dec00104 	addi	sp,sp,4
     74c:	f800283a 	ret

00000750 <seven_seg_hex>:
 * Parameters:
 *     base          - base address of the display
 *     num           - number to display
 *     leading_zeros - if non-zero display leading zeros
 */
void seven_seg_hex(alt_u32 * base, alt_u16 num, alt_u8 leading_zeros) {
     750:	defff204 	addi	sp,sp,-56
     754:	dfc00d15 	stw	ra,52(sp)
     758:	df000c15 	stw	fp,48(sp)
     75c:	df000c04 	addi	fp,sp,48
     760:	e13ffd15 	stw	r4,-12(fp)
     764:	2807883a 	mov	r3,r5
     768:	3005883a 	mov	r2,r6
     76c:	e0fffe0d 	sth	r3,-8(fp)
     770:	e0bfff05 	stb	r2,-4(fp)
	// an array that holds the values for each nibble
	alt_u8 hex[4];
	// encodings for each digit for the 7 LEDs making up the display
	alt_u8 HEX_CODES[16] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
     774:	00800034 	movhi	r2,0
     778:	10905b04 	addi	r2,r2,16748
     77c:	e0fff904 	addi	r3,fp,-28
     780:	1009883a 	mov	r4,r2
     784:	00800404 	movi	r2,16
     788:	100d883a 	mov	r6,r2
     78c:	200b883a 	mov	r5,r4
     790:	1809883a 	mov	r4,r3
     794:	00009140 	call	914 <memcpy>

	hex[0] = num & 0xF;          // least significant digit
     798:	e0bffe0b 	ldhu	r2,-8(fp)
     79c:	108003cc 	andi	r2,r2,15
     7a0:	e0bff805 	stb	r2,-32(fp)
	hex[1] = (num >> 4) & 0xF;
     7a4:	e0bffe0b 	ldhu	r2,-8(fp)
     7a8:	1004d13a 	srli	r2,r2,4
     7ac:	108003cc 	andi	r2,r2,15
     7b0:	e0bff845 	stb	r2,-31(fp)
	hex[2] = (num >> 8) & 0xF;
     7b4:	e0bffe0b 	ldhu	r2,-8(fp)
     7b8:	1004d23a 	srli	r2,r2,8
     7bc:	108003cc 	andi	r2,r2,15
     7c0:	e0bff885 	stb	r2,-30(fp)
	hex[3] = (num >> 12) & 0xF;  // most significant digit
     7c4:	e0bffe0b 	ldhu	r2,-8(fp)
     7c8:	1004d33a 	srli	r2,r2,12
     7cc:	108003cc 	andi	r2,r2,15
     7d0:	e0bff8c5 	stb	r2,-29(fp)

	// encode the digits
	// blank leading zeros if asked, but never other zeros
	alt_u8 trailing_zeros = 0;
     7d4:	e03ff405 	stb	zero,-48(fp)
	int i;
	int k = 24;
     7d8:	00800604 	movi	r2,24
     7dc:	e0bff615 	stw	r2,-40(fp)
	int hex4 = 0; // The encoded value to write to the base register
     7e0:	e03ff715 	stw	zero,-36(fp)
	for (i=3; i>=0; i--) {
     7e4:	008000c4 	movi	r2,3
     7e8:	e0bff515 	stw	r2,-44(fp)
     7ec:	00002006 	br	870 <seven_seg_hex+0x120>
		if (leading_zeros || hex[i] > 0 || trailing_zeros) {
     7f0:	e0bfff03 	ldbu	r2,-4(fp)
     7f4:	1000081e 	bne	r2,zero,818 <seven_seg_hex+0xc8>
     7f8:	e0fff804 	addi	r3,fp,-32
     7fc:	e0bff517 	ldw	r2,-44(fp)
     800:	1885883a 	add	r2,r3,r2
     804:	10800003 	ldbu	r2,0(r2)
     808:	10803fcc 	andi	r2,r2,255
     80c:	1000021e 	bne	r2,zero,818 <seven_seg_hex+0xc8>
     810:	e0bff403 	ldbu	r2,-48(fp)
     814:	10001026 	beq	r2,zero,858 <seven_seg_hex+0x108>
			hex4 += HEX_CODES[hex[i]] << k;
     818:	e0fff804 	addi	r3,fp,-32
     81c:	e0bff517 	ldw	r2,-44(fp)
     820:	1885883a 	add	r2,r3,r2
     824:	10800003 	ldbu	r2,0(r2)
     828:	10803fcc 	andi	r2,r2,255
     82c:	e0fff904 	addi	r3,fp,-28
     830:	1885883a 	add	r2,r3,r2
     834:	10800003 	ldbu	r2,0(r2)
     838:	10c03fcc 	andi	r3,r2,255
     83c:	e0bff617 	ldw	r2,-40(fp)
     840:	1884983a 	sll	r2,r3,r2
     844:	e0fff717 	ldw	r3,-36(fp)
     848:	1885883a 	add	r2,r3,r2
     84c:	e0bff715 	stw	r2,-36(fp)
			trailing_zeros = 1;
     850:	00800044 	movi	r2,1
     854:	e0bff405 	stb	r2,-48(fp)
		}
		k -= 8;
     858:	e0bff617 	ldw	r2,-40(fp)
     85c:	10bffe04 	addi	r2,r2,-8
     860:	e0bff615 	stw	r2,-40(fp)
	// blank leading zeros if asked, but never other zeros
	alt_u8 trailing_zeros = 0;
	int i;
	int k = 24;
	int hex4 = 0; // The encoded value to write to the base register
	for (i=3; i>=0; i--) {
     864:	e0bff517 	ldw	r2,-44(fp)
     868:	10bfffc4 	addi	r2,r2,-1
     86c:	e0bff515 	stw	r2,-44(fp)
     870:	e0bff517 	ldw	r2,-44(fp)
     874:	103fde0e 	bge	r2,zero,7f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70007f0>
			hex4 += HEX_CODES[hex[i]] << k;
			trailing_zeros = 1;
		}
		k -= 8;
	}
	IOWR(base, 0, hex4);
     878:	e0bffd17 	ldw	r2,-12(fp)
     87c:	e0fff717 	ldw	r3,-36(fp)
     880:	10c00035 	stwio	r3,0(r2)
}
     884:	0001883a 	nop
     888:	e037883a 	mov	sp,fp
     88c:	dfc00117 	ldw	ra,4(sp)
     890:	df000017 	ldw	fp,0(sp)
     894:	dec00204 	addi	sp,sp,8
     898:	f800283a 	ret

0000089c <timerISR>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void timerISR(void* context)
#else
void timerISR(void * context, alt_u32 id)
#endif
{
     89c:	defffb04 	addi	sp,sp,-20
     8a0:	dfc00415 	stw	ra,16(sp)
     8a4:	df000315 	stw	fp,12(sp)
     8a8:	df000304 	addi	fp,sp,12
     8ac:	e13ffe15 	stw	r4,-8(fp)
     8b0:	e17fff15 	stw	r5,-4(fp)
	/* Cast context. It is important that this be declared
	 * volatile to avoid unwanted compiler optimization.
	 */
	//IOWR(context, 0, 1);
	alt_u32* pCount =  (alt_u32*) context;
     8b4:	e0bffe17 	ldw	r2,-8(fp)
     8b8:	e0bffd15 	stw	r2,-12(fp)
	/* clear the interrupt */

    /* counter intial @ 0 pass in as context variable
     * find way to increment by 1 then pass back out via *count_ptr
     */
	IOWR(INTERVAL_TIMER_BASE, 0, 1);
     8bc:	00c00044 	movi	r3,1
     8c0:	00840034 	movhi	r2,4096
     8c4:	10880004 	addi	r2,r2,8192
     8c8:	10c00035 	stwio	r3,0(r2)
	/* Act upon the interrupt */
	*pCount = *pCount +1;
     8cc:	e0bffd17 	ldw	r2,-12(fp)
     8d0:	10800017 	ldw	r2,0(r2)
     8d4:	10c00044 	addi	r3,r2,1
     8d8:	e0bffd17 	ldw	r2,-12(fp)
     8dc:	10c00015 	stw	r3,0(r2)
	/* Display count value 
	 * (Is this the best place to do this? 
	 * Why or why not?) 
	 */
	HexDisplay((alt_u32*)HEX3_HEX0_BASE, *pCount);
     8e0:	e0bffd17 	ldw	r2,-12(fp)
     8e4:	10800017 	ldw	r2,0(r2)
     8e8:	10bfffcc 	andi	r2,r2,65535
     8ec:	100b883a 	mov	r5,r2
     8f0:	01040034 	movhi	r4,4096
     8f4:	21000804 	addi	r4,r4,32
     8f8:	00002840 	call	284 <HexDisplay>
	//HexDisplay((alt_u32*)0x10000020, *pCount);
	return;
     8fc:	0001883a 	nop
}
     900:	e037883a 	mov	sp,fp
     904:	dfc00117 	ldw	ra,4(sp)
     908:	df000017 	ldw	fp,0(sp)
     90c:	dec00204 	addi	sp,sp,8
     910:	f800283a 	ret

00000914 <memcpy>:
     914:	defffd04 	addi	sp,sp,-12
     918:	dfc00215 	stw	ra,8(sp)
     91c:	dc400115 	stw	r17,4(sp)
     920:	dc000015 	stw	r16,0(sp)
     924:	00c003c4 	movi	r3,15
     928:	2005883a 	mov	r2,r4
     92c:	1980452e 	bgeu	r3,r6,a44 <memcpy+0x130>
     930:	2906b03a 	or	r3,r5,r4
     934:	18c000cc 	andi	r3,r3,3
     938:	1800441e 	bne	r3,zero,a4c <memcpy+0x138>
     93c:	347ffc04 	addi	r17,r6,-16
     940:	8822d13a 	srli	r17,r17,4
     944:	28c00104 	addi	r3,r5,4
     948:	23400104 	addi	r13,r4,4
     94c:	8820913a 	slli	r16,r17,4
     950:	2b000204 	addi	r12,r5,8
     954:	22c00204 	addi	r11,r4,8
     958:	84000504 	addi	r16,r16,20
     95c:	2a800304 	addi	r10,r5,12
     960:	22400304 	addi	r9,r4,12
     964:	2c21883a 	add	r16,r5,r16
     968:	2811883a 	mov	r8,r5
     96c:	200f883a 	mov	r7,r4
     970:	41000017 	ldw	r4,0(r8)
     974:	1fc00017 	ldw	ra,0(r3)
     978:	63c00017 	ldw	r15,0(r12)
     97c:	39000015 	stw	r4,0(r7)
     980:	53800017 	ldw	r14,0(r10)
     984:	6fc00015 	stw	ra,0(r13)
     988:	5bc00015 	stw	r15,0(r11)
     98c:	4b800015 	stw	r14,0(r9)
     990:	18c00404 	addi	r3,r3,16
     994:	39c00404 	addi	r7,r7,16
     998:	42000404 	addi	r8,r8,16
     99c:	6b400404 	addi	r13,r13,16
     9a0:	63000404 	addi	r12,r12,16
     9a4:	5ac00404 	addi	r11,r11,16
     9a8:	52800404 	addi	r10,r10,16
     9ac:	4a400404 	addi	r9,r9,16
     9b0:	1c3fef1e 	bne	r3,r16,970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000970>
     9b4:	89c00044 	addi	r7,r17,1
     9b8:	380e913a 	slli	r7,r7,4
     9bc:	310003cc 	andi	r4,r6,15
     9c0:	02c000c4 	movi	r11,3
     9c4:	11c7883a 	add	r3,r2,r7
     9c8:	29cb883a 	add	r5,r5,r7
     9cc:	5900212e 	bgeu	r11,r4,a54 <memcpy+0x140>
     9d0:	1813883a 	mov	r9,r3
     9d4:	2811883a 	mov	r8,r5
     9d8:	200f883a 	mov	r7,r4
     9dc:	42800017 	ldw	r10,0(r8)
     9e0:	4a400104 	addi	r9,r9,4
     9e4:	39ffff04 	addi	r7,r7,-4
     9e8:	4abfff15 	stw	r10,-4(r9)
     9ec:	42000104 	addi	r8,r8,4
     9f0:	59fffa36 	bltu	r11,r7,9dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009dc>
     9f4:	213fff04 	addi	r4,r4,-4
     9f8:	2008d0ba 	srli	r4,r4,2
     9fc:	318000cc 	andi	r6,r6,3
     a00:	21000044 	addi	r4,r4,1
     a04:	2109883a 	add	r4,r4,r4
     a08:	2109883a 	add	r4,r4,r4
     a0c:	1907883a 	add	r3,r3,r4
     a10:	290b883a 	add	r5,r5,r4
     a14:	30000626 	beq	r6,zero,a30 <memcpy+0x11c>
     a18:	198d883a 	add	r6,r3,r6
     a1c:	29c00003 	ldbu	r7,0(r5)
     a20:	18c00044 	addi	r3,r3,1
     a24:	29400044 	addi	r5,r5,1
     a28:	19ffffc5 	stb	r7,-1(r3)
     a2c:	19bffb1e 	bne	r3,r6,a1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a1c>
     a30:	dfc00217 	ldw	ra,8(sp)
     a34:	dc400117 	ldw	r17,4(sp)
     a38:	dc000017 	ldw	r16,0(sp)
     a3c:	dec00304 	addi	sp,sp,12
     a40:	f800283a 	ret
     a44:	2007883a 	mov	r3,r4
     a48:	003ff206 	br	a14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a14>
     a4c:	2007883a 	mov	r3,r4
     a50:	003ff106 	br	a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a18>
     a54:	200d883a 	mov	r6,r4
     a58:	003fee06 	br	a14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a14>

00000a5c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
     a5c:	defff004 	addi	sp,sp,-64
     a60:	df000f15 	stw	fp,60(sp)
     a64:	df000f04 	addi	fp,sp,60
     a68:	e13ffd15 	stw	r4,-12(fp)
     a6c:	e17ffe15 	stw	r5,-8(fp)
     a70:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
     a74:	00bffa84 	movi	r2,-22
     a78:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
     a7c:	e0bffd17 	ldw	r2,-12(fp)
     a80:	10800828 	cmpgeui	r2,r2,32
     a84:	10005c1e 	bne	r2,zero,bf8 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     a88:	0005303a 	rdctl	r2,status
     a8c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     a90:	e0fff617 	ldw	r3,-40(fp)
     a94:	00bfff84 	movi	r2,-2
     a98:	1884703a 	and	r2,r3,r2
     a9c:	1001703a 	wrctl	status,r2
  
  return context;
     aa0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
     aa4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
     aa8:	00800034 	movhi	r2,0
     aac:	109d9004 	addi	r2,r2,30272
     ab0:	e0fffd17 	ldw	r3,-12(fp)
     ab4:	180690fa 	slli	r3,r3,3
     ab8:	10c5883a 	add	r2,r2,r3
     abc:	e0ffff17 	ldw	r3,-4(fp)
     ac0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
     ac4:	00800034 	movhi	r2,0
     ac8:	109d9004 	addi	r2,r2,30272
     acc:	e0fffd17 	ldw	r3,-12(fp)
     ad0:	180690fa 	slli	r3,r3,3
     ad4:	10c5883a 	add	r2,r2,r3
     ad8:	10800104 	addi	r2,r2,4
     adc:	e0fffe17 	ldw	r3,-8(fp)
     ae0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
     ae4:	e0bfff17 	ldw	r2,-4(fp)
     ae8:	10001f26 	beq	r2,zero,b68 <alt_irq_register+0x10c>
     aec:	e0bffd17 	ldw	r2,-12(fp)
     af0:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     af4:	0005303a 	rdctl	r2,status
     af8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     afc:	e0fff717 	ldw	r3,-36(fp)
     b00:	00bfff84 	movi	r2,-2
     b04:	1884703a 	and	r2,r3,r2
     b08:	1001703a 	wrctl	status,r2
  
  return context;
     b0c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     b10:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
     b14:	00c00044 	movi	r3,1
     b18:	e0bff217 	ldw	r2,-56(fp)
     b1c:	1884983a 	sll	r2,r3,r2
     b20:	1007883a 	mov	r3,r2
     b24:	00800034 	movhi	r2,0
     b28:	109d8804 	addi	r2,r2,30240
     b2c:	10800017 	ldw	r2,0(r2)
     b30:	1886b03a 	or	r3,r3,r2
     b34:	00800034 	movhi	r2,0
     b38:	109d8804 	addi	r2,r2,30240
     b3c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     b40:	00800034 	movhi	r2,0
     b44:	109d8804 	addi	r2,r2,30240
     b48:	10800017 	ldw	r2,0(r2)
     b4c:	100170fa 	wrctl	ienable,r2
     b50:	e0bff817 	ldw	r2,-32(fp)
     b54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     b58:	e0bff917 	ldw	r2,-28(fp)
     b5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     b60:	0005883a 	mov	r2,zero
     b64:	00001f06 	br	be4 <alt_irq_register+0x188>
     b68:	e0bffd17 	ldw	r2,-12(fp)
     b6c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     b70:	0005303a 	rdctl	r2,status
     b74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     b78:	e0fffa17 	ldw	r3,-24(fp)
     b7c:	00bfff84 	movi	r2,-2
     b80:	1884703a 	and	r2,r3,r2
     b84:	1001703a 	wrctl	status,r2
  
  return context;
     b88:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     b8c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
     b90:	00c00044 	movi	r3,1
     b94:	e0bff417 	ldw	r2,-48(fp)
     b98:	1884983a 	sll	r2,r3,r2
     b9c:	0084303a 	nor	r2,zero,r2
     ba0:	1007883a 	mov	r3,r2
     ba4:	00800034 	movhi	r2,0
     ba8:	109d8804 	addi	r2,r2,30240
     bac:	10800017 	ldw	r2,0(r2)
     bb0:	1886703a 	and	r3,r3,r2
     bb4:	00800034 	movhi	r2,0
     bb8:	109d8804 	addi	r2,r2,30240
     bbc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     bc0:	00800034 	movhi	r2,0
     bc4:	109d8804 	addi	r2,r2,30240
     bc8:	10800017 	ldw	r2,0(r2)
     bcc:	100170fa 	wrctl	ienable,r2
     bd0:	e0bffb17 	ldw	r2,-20(fp)
     bd4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     bd8:	e0bffc17 	ldw	r2,-16(fp)
     bdc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     be0:	0005883a 	mov	r2,zero
     be4:	e0bff115 	stw	r2,-60(fp)
     be8:	e0bff317 	ldw	r2,-52(fp)
     bec:	e0bff515 	stw	r2,-44(fp)
     bf0:	e0bff517 	ldw	r2,-44(fp)
     bf4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
     bf8:	e0bff117 	ldw	r2,-60(fp)
}
     bfc:	e037883a 	mov	sp,fp
     c00:	df000017 	ldw	fp,0(sp)
     c04:	dec00104 	addi	sp,sp,4
     c08:	f800283a 	ret

00000c0c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     c0c:	defffc04 	addi	sp,sp,-16
     c10:	df000315 	stw	fp,12(sp)
     c14:	df000304 	addi	fp,sp,12
     c18:	e13ffd15 	stw	r4,-12(fp)
     c1c:	e17ffe15 	stw	r5,-8(fp)
     c20:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     c24:	e0fffe17 	ldw	r3,-8(fp)
     c28:	e0bffd17 	ldw	r2,-12(fp)
     c2c:	18800c26 	beq	r3,r2,c60 <alt_load_section+0x54>
  {
    while( to != end )
     c30:	00000806 	br	c54 <alt_load_section+0x48>
    {
      *to++ = *from++;
     c34:	e0bffe17 	ldw	r2,-8(fp)
     c38:	10c00104 	addi	r3,r2,4
     c3c:	e0fffe15 	stw	r3,-8(fp)
     c40:	e0fffd17 	ldw	r3,-12(fp)
     c44:	19000104 	addi	r4,r3,4
     c48:	e13ffd15 	stw	r4,-12(fp)
     c4c:	18c00017 	ldw	r3,0(r3)
     c50:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     c54:	e0fffe17 	ldw	r3,-8(fp)
     c58:	e0bfff17 	ldw	r2,-4(fp)
     c5c:	18bff51e 	bne	r3,r2,c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000c34>
    {
      *to++ = *from++;
    }
  }
}
     c60:	0001883a 	nop
     c64:	e037883a 	mov	sp,fp
     c68:	df000017 	ldw	fp,0(sp)
     c6c:	dec00104 	addi	sp,sp,4
     c70:	f800283a 	ret

00000c74 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     c74:	defffe04 	addi	sp,sp,-8
     c78:	dfc00115 	stw	ra,4(sp)
     c7c:	df000015 	stw	fp,0(sp)
     c80:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     c84:	01800034 	movhi	r6,0
     c88:	31972104 	addi	r6,r6,23684
     c8c:	01400034 	movhi	r5,0
     c90:	2950bc04 	addi	r5,r5,17136
     c94:	01000034 	movhi	r4,0
     c98:	21172104 	addi	r4,r4,23684
     c9c:	0000c0c0 	call	c0c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     ca0:	01800034 	movhi	r6,0
     ca4:	31809204 	addi	r6,r6,584
     ca8:	01400034 	movhi	r5,0
     cac:	29400804 	addi	r5,r5,32
     cb0:	01000034 	movhi	r4,0
     cb4:	21000804 	addi	r4,r4,32
     cb8:	0000c0c0 	call	c0c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     cbc:	01800034 	movhi	r6,0
     cc0:	3190bc04 	addi	r6,r6,17136
     cc4:	01400034 	movhi	r5,0
     cc8:	29505b04 	addi	r5,r5,16748
     ccc:	01000034 	movhi	r4,0
     cd0:	21105b04 	addi	r4,r4,16748
     cd4:	0000c0c0 	call	c0c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     cd8:	00031a80 	call	31a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
     cdc:	00034380 	call	3438 <alt_icache_flush_all>
}
     ce0:	0001883a 	nop
     ce4:	e037883a 	mov	sp,fp
     ce8:	dfc00117 	ldw	ra,4(sp)
     cec:	df000017 	ldw	fp,0(sp)
     cf0:	dec00204 	addi	sp,sp,8
     cf4:	f800283a 	ret

00000cf8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     cf8:	defffd04 	addi	sp,sp,-12
     cfc:	dfc00215 	stw	ra,8(sp)
     d00:	df000115 	stw	fp,4(sp)
     d04:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     d08:	0009883a 	mov	r4,zero
     d0c:	0000dac0 	call	dac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     d10:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     d14:	0000de40 	call	de4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     d18:	01800034 	movhi	r6,0
     d1c:	31905f04 	addi	r6,r6,16764
     d20:	01400034 	movhi	r5,0
     d24:	29505f04 	addi	r5,r5,16764
     d28:	01000034 	movhi	r4,0
     d2c:	21105f04 	addi	r4,r4,16764
     d30:	00035300 	call	3530 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     d34:	00032e80 	call	32e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     d38:	01000034 	movhi	r4,0
     d3c:	210cd204 	addi	r4,r4,13128
     d40:	0003d400 	call	3d40 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     d44:	d0a67317 	ldw	r2,-26164(gp)
     d48:	d0e67417 	ldw	r3,-26160(gp)
     d4c:	d1267517 	ldw	r4,-26156(gp)
     d50:	200d883a 	mov	r6,r4
     d54:	180b883a 	mov	r5,r3
     d58:	1009883a 	mov	r4,r2
     d5c:	00002cc0 	call	2cc <main>
     d60:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     d64:	01000044 	movi	r4,1
     d68:	00030d80 	call	30d8 <close>
  exit (result);
     d6c:	e13fff17 	ldw	r4,-4(fp)
     d70:	0003d540 	call	3d54 <exit>

00000d74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     d74:	defffd04 	addi	sp,sp,-12
     d78:	dfc00215 	stw	ra,8(sp)
     d7c:	df000115 	stw	fp,4(sp)
     d80:	df000104 	addi	fp,sp,4
     d84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     d88:	01400034 	movhi	r5,0
     d8c:	29571904 	addi	r5,r5,23652
     d90:	e13fff17 	ldw	r4,-4(fp)
     d94:	00032440 	call	3244 <alt_dev_llist_insert>
}
     d98:	e037883a 	mov	sp,fp
     d9c:	dfc00117 	ldw	ra,4(sp)
     da0:	df000017 	ldw	fp,0(sp)
     da4:	dec00204 	addi	sp,sp,8
     da8:	f800283a 	ret

00000dac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     dac:	defffd04 	addi	sp,sp,-12
     db0:	dfc00215 	stw	ra,8(sp)
     db4:	df000115 	stw	fp,4(sp)
     db8:	df000104 	addi	fp,sp,4
     dbc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
     dc0:	0003a280 	call	3a28 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     dc4:	00800044 	movi	r2,1
     dc8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     dcc:	0001883a 	nop
     dd0:	e037883a 	mov	sp,fp
     dd4:	dfc00117 	ldw	ra,4(sp)
     dd8:	df000017 	ldw	fp,0(sp)
     ddc:	dec00204 	addi	sp,sp,8
     de0:	f800283a 	ret

00000de4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     de4:	defffd04 	addi	sp,sp,-12
     de8:	dfc00215 	stw	ra,8(sp)
     dec:	df000115 	stw	fp,4(sp)
     df0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     df4:	01c00204 	movi	r7,8
     df8:	000d883a 	mov	r6,zero
     dfc:	000b883a 	mov	r5,zero
     e00:	01040034 	movhi	r4,4096
     e04:	21080004 	addi	r4,r4,8192
     e08:	0001bf40 	call	1bf4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     e0c:	01800204 	movi	r6,8
     e10:	000b883a 	mov	r5,zero
     e14:	01000034 	movhi	r4,0
     e18:	2110c604 	addi	r4,r4,17176
     e1c:	000126c0 	call	126c <altera_avalon_jtag_uart_init>
     e20:	01000034 	movhi	r4,0
     e24:	2110bc04 	addi	r4,r4,17136
     e28:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
     e2c:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
     e30:	01000034 	movhi	r4,0
     e34:	2114d404 	addi	r4,r4,21328
     e38:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
     e3c:	01000034 	movhi	r4,0
     e40:	2114e004 	addi	r4,r4,21376
     e44:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
     e48:	01000034 	movhi	r4,0
     e4c:	2114ec04 	addi	r4,r4,21424
     e50:	0001d2c0 	call	1d2c <alt_up_character_lcd_init>
     e54:	01000034 	movhi	r4,0
     e58:	2114ec04 	addi	r4,r4,21424
     e5c:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
     e60:	01000034 	movhi	r4,0
     e64:	2114f704 	addi	r4,r4,21468
     e68:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
     e6c:	01000034 	movhi	r4,0
     e70:	21150204 	addi	r4,r4,21512
     e74:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
     e78:	01000034 	movhi	r4,0
     e7c:	21150d04 	addi	r4,r4,21556
     e80:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
     e84:	01000034 	movhi	r4,0
     e88:	21151804 	addi	r4,r4,21600
     e8c:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
     e90:	01000034 	movhi	r4,0
     e94:	21152304 	addi	r4,r4,21644
     e98:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
     e9c:	01000034 	movhi	r4,0
     ea0:	21152e04 	addi	r4,r4,21688
     ea4:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
     ea8:	01000034 	movhi	r4,0
     eac:	21153904 	addi	r4,r4,21732
     eb0:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
     eb4:	01000034 	movhi	r4,0
     eb8:	21154404 	addi	r4,r4,21776
     ebc:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     ec0:	01000034 	movhi	r4,0
     ec4:	21154f04 	addi	r4,r4,21820
     ec8:	00026280 	call	2628 <alt_up_ps2_init>
     ecc:	01000034 	movhi	r4,0
     ed0:	21154f04 	addi	r4,r4,21820
     ed4:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
     ed8:	01000034 	movhi	r4,0
     edc:	21155d04 	addi	r4,r4,21876
     ee0:	00026280 	call	2628 <alt_up_ps2_init>
     ee4:	01000034 	movhi	r4,0
     ee8:	21155d04 	addi	r4,r4,21876
     eec:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
     ef0:	01000034 	movhi	r4,0
     ef4:	21156b04 	addi	r4,r4,21932
     ef8:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
     efc:	01000034 	movhi	r4,0
     f00:	21157604 	addi	r4,r4,21976
     f04:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
     f08:	00800034 	movhi	r2,0
     f0c:	10958304 	addi	r2,r2,22028
     f10:	10800a17 	ldw	r2,40(r2)
     f14:	10800017 	ldw	r2,0(r2)
     f18:	1007883a 	mov	r3,r2
     f1c:	00800034 	movhi	r2,0
     f20:	10958304 	addi	r2,r2,22028
     f24:	10c00b15 	stw	r3,44(r2)
     f28:	00800034 	movhi	r2,0
     f2c:	10958304 	addi	r2,r2,22028
     f30:	10800a17 	ldw	r2,40(r2)
     f34:	10800104 	addi	r2,r2,4
     f38:	10800017 	ldw	r2,0(r2)
     f3c:	1007883a 	mov	r3,r2
     f40:	00800034 	movhi	r2,0
     f44:	10958304 	addi	r2,r2,22028
     f48:	10c00c15 	stw	r3,48(r2)
     f4c:	00800034 	movhi	r2,0
     f50:	10958304 	addi	r2,r2,22028
     f54:	10800a17 	ldw	r2,40(r2)
     f58:	10800204 	addi	r2,r2,8
     f5c:	10800017 	ldw	r2,0(r2)
     f60:	10ffffcc 	andi	r3,r2,65535
     f64:	00800034 	movhi	r2,0
     f68:	10958304 	addi	r2,r2,22028
     f6c:	10c00f15 	stw	r3,60(r2)
     f70:	00800034 	movhi	r2,0
     f74:	10958304 	addi	r2,r2,22028
     f78:	10800a17 	ldw	r2,40(r2)
     f7c:	10800204 	addi	r2,r2,8
     f80:	10800017 	ldw	r2,0(r2)
     f84:	1006d43a 	srli	r3,r2,16
     f88:	00800034 	movhi	r2,0
     f8c:	10958304 	addi	r2,r2,22028
     f90:	10c01015 	stw	r3,64(r2)
     f94:	00800034 	movhi	r2,0
     f98:	10958304 	addi	r2,r2,22028
     f9c:	10800a17 	ldw	r2,40(r2)
     fa0:	10800304 	addi	r2,r2,12
     fa4:	10800017 	ldw	r2,0(r2)
     fa8:	1005d07a 	srai	r2,r2,1
     fac:	10c0004c 	andi	r3,r2,1
     fb0:	00800034 	movhi	r2,0
     fb4:	10958304 	addi	r2,r2,22028
     fb8:	10c00d15 	stw	r3,52(r2)
     fbc:	00800034 	movhi	r2,0
     fc0:	10958304 	addi	r2,r2,22028
     fc4:	10800a17 	ldw	r2,40(r2)
     fc8:	10800304 	addi	r2,r2,12
     fcc:	10800017 	ldw	r2,0(r2)
     fd0:	1005d13a 	srai	r2,r2,4
     fd4:	10c003cc 	andi	r3,r2,15
     fd8:	00800034 	movhi	r2,0
     fdc:	10958304 	addi	r2,r2,22028
     fe0:	10c00e15 	stw	r3,56(r2)
     fe4:	00800034 	movhi	r2,0
     fe8:	10958304 	addi	r2,r2,22028
     fec:	10800a17 	ldw	r2,40(r2)
     ff0:	10800304 	addi	r2,r2,12
     ff4:	10800017 	ldw	r2,0(r2)
     ff8:	1005d43a 	srai	r2,r2,16
     ffc:	e0bfff05 	stb	r2,-4(fp)
    1000:	00800034 	movhi	r2,0
    1004:	10958304 	addi	r2,r2,22028
    1008:	10800a17 	ldw	r2,40(r2)
    100c:	10800304 	addi	r2,r2,12
    1010:	10800017 	ldw	r2,0(r2)
    1014:	1004d63a 	srli	r2,r2,24
    1018:	e0bfff45 	stb	r2,-3(fp)
    101c:	00800034 	movhi	r2,0
    1020:	10958304 	addi	r2,r2,22028
    1024:	10800e17 	ldw	r2,56(r2)
    1028:	10800058 	cmpnei	r2,r2,1
    102c:	1000041e 	bne	r2,zero,1040 <alt_sys_init+0x25c>
    1030:	00800034 	movhi	r2,0
    1034:	10958304 	addi	r2,r2,22028
    1038:	10001115 	stw	zero,68(r2)
    103c:	00000e06 	br	1078 <alt_sys_init+0x294>
    1040:	00800034 	movhi	r2,0
    1044:	10958304 	addi	r2,r2,22028
    1048:	10800e17 	ldw	r2,56(r2)
    104c:	10800098 	cmpnei	r2,r2,2
    1050:	1000051e 	bne	r2,zero,1068 <alt_sys_init+0x284>
    1054:	00800034 	movhi	r2,0
    1058:	10958304 	addi	r2,r2,22028
    105c:	00c00044 	movi	r3,1
    1060:	10c01115 	stw	r3,68(r2)
    1064:	00000406 	br	1078 <alt_sys_init+0x294>
    1068:	00800034 	movhi	r2,0
    106c:	10958304 	addi	r2,r2,22028
    1070:	00c00084 	movi	r3,2
    1074:	10c01115 	stw	r3,68(r2)
    1078:	e0bfff03 	ldbu	r2,-4(fp)
    107c:	00c00804 	movi	r3,32
    1080:	1885c83a 	sub	r2,r3,r2
    1084:	00ffffc4 	movi	r3,-1
    1088:	1886d83a 	srl	r3,r3,r2
    108c:	00800034 	movhi	r2,0
    1090:	10958304 	addi	r2,r2,22028
    1094:	10c01215 	stw	r3,72(r2)
    1098:	e0ffff03 	ldbu	r3,-4(fp)
    109c:	00800034 	movhi	r2,0
    10a0:	10958304 	addi	r2,r2,22028
    10a4:	10801117 	ldw	r2,68(r2)
    10a8:	1887883a 	add	r3,r3,r2
    10ac:	00800034 	movhi	r2,0
    10b0:	10958304 	addi	r2,r2,22028
    10b4:	10c01315 	stw	r3,76(r2)
    10b8:	e0bfff43 	ldbu	r2,-3(fp)
    10bc:	00c00804 	movi	r3,32
    10c0:	1885c83a 	sub	r2,r3,r2
    10c4:	00ffffc4 	movi	r3,-1
    10c8:	1886d83a 	srl	r3,r3,r2
    10cc:	00800034 	movhi	r2,0
    10d0:	10958304 	addi	r2,r2,22028
    10d4:	10c01415 	stw	r3,80(r2)
    10d8:	01000034 	movhi	r4,0
    10dc:	21158304 	addi	r4,r4,22028
    10e0:	0000d740 	call	d74 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    10e4:	01000034 	movhi	r4,0
    10e8:	21159804 	addi	r4,r4,22112
    10ec:	0000d740 	call	d74 <alt_dev_reg>
}
    10f0:	0001883a 	nop
    10f4:	e037883a 	mov	sp,fp
    10f8:	dfc00117 	ldw	ra,4(sp)
    10fc:	df000017 	ldw	fp,0(sp)
    1100:	dec00204 	addi	sp,sp,8
    1104:	f800283a 	ret

00001108 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1108:	defffa04 	addi	sp,sp,-24
    110c:	dfc00515 	stw	ra,20(sp)
    1110:	df000415 	stw	fp,16(sp)
    1114:	df000404 	addi	fp,sp,16
    1118:	e13ffd15 	stw	r4,-12(fp)
    111c:	e17ffe15 	stw	r5,-8(fp)
    1120:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1124:	e0bffd17 	ldw	r2,-12(fp)
    1128:	10800017 	ldw	r2,0(r2)
    112c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1130:	e0bffc17 	ldw	r2,-16(fp)
    1134:	10c00a04 	addi	r3,r2,40
    1138:	e0bffd17 	ldw	r2,-12(fp)
    113c:	10800217 	ldw	r2,8(r2)
    1140:	100f883a 	mov	r7,r2
    1144:	e1bfff17 	ldw	r6,-4(fp)
    1148:	e17ffe17 	ldw	r5,-8(fp)
    114c:	1809883a 	mov	r4,r3
    1150:	00017380 	call	1738 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1154:	e037883a 	mov	sp,fp
    1158:	dfc00117 	ldw	ra,4(sp)
    115c:	df000017 	ldw	fp,0(sp)
    1160:	dec00204 	addi	sp,sp,8
    1164:	f800283a 	ret

00001168 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1168:	defffa04 	addi	sp,sp,-24
    116c:	dfc00515 	stw	ra,20(sp)
    1170:	df000415 	stw	fp,16(sp)
    1174:	df000404 	addi	fp,sp,16
    1178:	e13ffd15 	stw	r4,-12(fp)
    117c:	e17ffe15 	stw	r5,-8(fp)
    1180:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1184:	e0bffd17 	ldw	r2,-12(fp)
    1188:	10800017 	ldw	r2,0(r2)
    118c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1190:	e0bffc17 	ldw	r2,-16(fp)
    1194:	10c00a04 	addi	r3,r2,40
    1198:	e0bffd17 	ldw	r2,-12(fp)
    119c:	10800217 	ldw	r2,8(r2)
    11a0:	100f883a 	mov	r7,r2
    11a4:	e1bfff17 	ldw	r6,-4(fp)
    11a8:	e17ffe17 	ldw	r5,-8(fp)
    11ac:	1809883a 	mov	r4,r3
    11b0:	00019540 	call	1954 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    11b4:	e037883a 	mov	sp,fp
    11b8:	dfc00117 	ldw	ra,4(sp)
    11bc:	df000017 	ldw	fp,0(sp)
    11c0:	dec00204 	addi	sp,sp,8
    11c4:	f800283a 	ret

000011c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    11c8:	defffc04 	addi	sp,sp,-16
    11cc:	dfc00315 	stw	ra,12(sp)
    11d0:	df000215 	stw	fp,8(sp)
    11d4:	df000204 	addi	fp,sp,8
    11d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    11dc:	e0bfff17 	ldw	r2,-4(fp)
    11e0:	10800017 	ldw	r2,0(r2)
    11e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    11e8:	e0bffe17 	ldw	r2,-8(fp)
    11ec:	10c00a04 	addi	r3,r2,40
    11f0:	e0bfff17 	ldw	r2,-4(fp)
    11f4:	10800217 	ldw	r2,8(r2)
    11f8:	100b883a 	mov	r5,r2
    11fc:	1809883a 	mov	r4,r3
    1200:	00015e00 	call	15e0 <altera_avalon_jtag_uart_close>
}
    1204:	e037883a 	mov	sp,fp
    1208:	dfc00117 	ldw	ra,4(sp)
    120c:	df000017 	ldw	fp,0(sp)
    1210:	dec00204 	addi	sp,sp,8
    1214:	f800283a 	ret

00001218 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    1218:	defffa04 	addi	sp,sp,-24
    121c:	dfc00515 	stw	ra,20(sp)
    1220:	df000415 	stw	fp,16(sp)
    1224:	df000404 	addi	fp,sp,16
    1228:	e13ffd15 	stw	r4,-12(fp)
    122c:	e17ffe15 	stw	r5,-8(fp)
    1230:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    1234:	e0bffd17 	ldw	r2,-12(fp)
    1238:	10800017 	ldw	r2,0(r2)
    123c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1240:	e0bffc17 	ldw	r2,-16(fp)
    1244:	10800a04 	addi	r2,r2,40
    1248:	e1bfff17 	ldw	r6,-4(fp)
    124c:	e17ffe17 	ldw	r5,-8(fp)
    1250:	1009883a 	mov	r4,r2
    1254:	00016480 	call	1648 <altera_avalon_jtag_uart_ioctl>
}
    1258:	e037883a 	mov	sp,fp
    125c:	dfc00117 	ldw	ra,4(sp)
    1260:	df000017 	ldw	fp,0(sp)
    1264:	dec00204 	addi	sp,sp,8
    1268:	f800283a 	ret

0000126c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    126c:	defffb04 	addi	sp,sp,-20
    1270:	dfc00415 	stw	ra,16(sp)
    1274:	df000315 	stw	fp,12(sp)
    1278:	df000304 	addi	fp,sp,12
    127c:	e13ffd15 	stw	r4,-12(fp)
    1280:	e17ffe15 	stw	r5,-8(fp)
    1284:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1288:	e0bffd17 	ldw	r2,-12(fp)
    128c:	00c00044 	movi	r3,1
    1290:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1294:	e0bffd17 	ldw	r2,-12(fp)
    1298:	10800017 	ldw	r2,0(r2)
    129c:	10800104 	addi	r2,r2,4
    12a0:	1007883a 	mov	r3,r2
    12a4:	e0bffd17 	ldw	r2,-12(fp)
    12a8:	10800817 	ldw	r2,32(r2)
    12ac:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    12b0:	e0bfff17 	ldw	r2,-4(fp)
    12b4:	01800034 	movhi	r6,0
    12b8:	3184ca04 	addi	r6,r6,4904
    12bc:	e17ffd17 	ldw	r5,-12(fp)
    12c0:	1009883a 	mov	r4,r2
    12c4:	0000a5c0 	call	a5c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    12c8:	e0bffd17 	ldw	r2,-12(fp)
    12cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    12d0:	e0bffd17 	ldw	r2,-12(fp)
    12d4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    12d8:	00800034 	movhi	r2,0
    12dc:	109d8c04 	addi	r2,r2,30256
    12e0:	10800017 	ldw	r2,0(r2)
    12e4:	e1fffd17 	ldw	r7,-12(fp)
    12e8:	01800034 	movhi	r6,0
    12ec:	31854e04 	addi	r6,r6,5432
    12f0:	100b883a 	mov	r5,r2
    12f4:	1809883a 	mov	r4,r3
    12f8:	0002f480 	call	2f48 <alt_alarm_start>
    12fc:	1000040e 	bge	r2,zero,1310 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    1300:	e0fffd17 	ldw	r3,-12(fp)
    1304:	00a00034 	movhi	r2,32768
    1308:	10bfffc4 	addi	r2,r2,-1
    130c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    1310:	0001883a 	nop
    1314:	e037883a 	mov	sp,fp
    1318:	dfc00117 	ldw	ra,4(sp)
    131c:	df000017 	ldw	fp,0(sp)
    1320:	dec00204 	addi	sp,sp,8
    1324:	f800283a 	ret

00001328 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    1328:	defff704 	addi	sp,sp,-36
    132c:	df000815 	stw	fp,32(sp)
    1330:	df000804 	addi	fp,sp,32
    1334:	e13ffe15 	stw	r4,-8(fp)
    1338:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    133c:	e0bffe17 	ldw	r2,-8(fp)
    1340:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
    1344:	e0bffa17 	ldw	r2,-24(fp)
    1348:	10800017 	ldw	r2,0(r2)
    134c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1350:	e0bffb17 	ldw	r2,-20(fp)
    1354:	10800104 	addi	r2,r2,4
    1358:	10800037 	ldwio	r2,0(r2)
    135c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    1360:	e0bffc17 	ldw	r2,-16(fp)
    1364:	1080c00c 	andi	r2,r2,768
    1368:	10006d26 	beq	r2,zero,1520 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    136c:	e0bffc17 	ldw	r2,-16(fp)
    1370:	1080400c 	andi	r2,r2,256
    1374:	10003526 	beq	r2,zero,144c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    1378:	00800074 	movhi	r2,1
    137c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1380:	e0bffa17 	ldw	r2,-24(fp)
    1384:	10800a17 	ldw	r2,40(r2)
    1388:	10800044 	addi	r2,r2,1
    138c:	1081ffcc 	andi	r2,r2,2047
    1390:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
    1394:	e0bffa17 	ldw	r2,-24(fp)
    1398:	10c00b17 	ldw	r3,44(r2)
    139c:	e0bffd17 	ldw	r2,-12(fp)
    13a0:	18801526 	beq	r3,r2,13f8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    13a4:	e0bffb17 	ldw	r2,-20(fp)
    13a8:	10800037 	ldwio	r2,0(r2)
    13ac:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    13b0:	e0bff817 	ldw	r2,-32(fp)
    13b4:	10a0000c 	andi	r2,r2,32768
    13b8:	10001126 	beq	r2,zero,1400 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    13bc:	e0bffa17 	ldw	r2,-24(fp)
    13c0:	10800a17 	ldw	r2,40(r2)
    13c4:	e0fff817 	ldw	r3,-32(fp)
    13c8:	1809883a 	mov	r4,r3
    13cc:	e0fffa17 	ldw	r3,-24(fp)
    13d0:	1885883a 	add	r2,r3,r2
    13d4:	10800e04 	addi	r2,r2,56
    13d8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    13dc:	e0bffa17 	ldw	r2,-24(fp)
    13e0:	10800a17 	ldw	r2,40(r2)
    13e4:	10800044 	addi	r2,r2,1
    13e8:	10c1ffcc 	andi	r3,r2,2047
    13ec:	e0bffa17 	ldw	r2,-24(fp)
    13f0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    13f4:	003fe206 	br	1380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001380>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    13f8:	0001883a 	nop
    13fc:	00000106 	br	1404 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    1400:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1404:	e0bff817 	ldw	r2,-32(fp)
    1408:	10bfffec 	andhi	r2,r2,65535
    140c:	10000f26 	beq	r2,zero,144c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1410:	e0bffa17 	ldw	r2,-24(fp)
    1414:	10c00817 	ldw	r3,32(r2)
    1418:	00bfff84 	movi	r2,-2
    141c:	1886703a 	and	r3,r3,r2
    1420:	e0bffa17 	ldw	r2,-24(fp)
    1424:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    1428:	e0bffb17 	ldw	r2,-20(fp)
    142c:	10800104 	addi	r2,r2,4
    1430:	1007883a 	mov	r3,r2
    1434:	e0bffa17 	ldw	r2,-24(fp)
    1438:	10800817 	ldw	r2,32(r2)
    143c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1440:	e0bffb17 	ldw	r2,-20(fp)
    1444:	10800104 	addi	r2,r2,4
    1448:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    144c:	e0bffc17 	ldw	r2,-16(fp)
    1450:	1080800c 	andi	r2,r2,512
    1454:	103fbe26 	beq	r2,zero,1350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001350>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1458:	e0bffc17 	ldw	r2,-16(fp)
    145c:	1004d43a 	srli	r2,r2,16
    1460:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    1464:	00001406 	br	14b8 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    1468:	e0bffb17 	ldw	r2,-20(fp)
    146c:	e0fffa17 	ldw	r3,-24(fp)
    1470:	18c00d17 	ldw	r3,52(r3)
    1474:	e13ffa17 	ldw	r4,-24(fp)
    1478:	20c7883a 	add	r3,r4,r3
    147c:	18c20e04 	addi	r3,r3,2104
    1480:	18c00003 	ldbu	r3,0(r3)
    1484:	18c03fcc 	andi	r3,r3,255
    1488:	18c0201c 	xori	r3,r3,128
    148c:	18ffe004 	addi	r3,r3,-128
    1490:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1494:	e0bffa17 	ldw	r2,-24(fp)
    1498:	10800d17 	ldw	r2,52(r2)
    149c:	10800044 	addi	r2,r2,1
    14a0:	10c1ffcc 	andi	r3,r2,2047
    14a4:	e0bffa17 	ldw	r2,-24(fp)
    14a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    14ac:	e0bff917 	ldw	r2,-28(fp)
    14b0:	10bfffc4 	addi	r2,r2,-1
    14b4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    14b8:	e0bff917 	ldw	r2,-28(fp)
    14bc:	10000526 	beq	r2,zero,14d4 <altera_avalon_jtag_uart_irq+0x1ac>
    14c0:	e0bffa17 	ldw	r2,-24(fp)
    14c4:	10c00d17 	ldw	r3,52(r2)
    14c8:	e0bffa17 	ldw	r2,-24(fp)
    14cc:	10800c17 	ldw	r2,48(r2)
    14d0:	18bfe51e 	bne	r3,r2,1468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001468>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    14d4:	e0bff917 	ldw	r2,-28(fp)
    14d8:	103f9d26 	beq	r2,zero,1350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001350>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    14dc:	e0bffa17 	ldw	r2,-24(fp)
    14e0:	10c00817 	ldw	r3,32(r2)
    14e4:	00bfff44 	movi	r2,-3
    14e8:	1886703a 	and	r3,r3,r2
    14ec:	e0bffa17 	ldw	r2,-24(fp)
    14f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    14f4:	e0bffa17 	ldw	r2,-24(fp)
    14f8:	10800017 	ldw	r2,0(r2)
    14fc:	10800104 	addi	r2,r2,4
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffa17 	ldw	r2,-24(fp)
    1508:	10800817 	ldw	r2,32(r2)
    150c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1510:	e0bffb17 	ldw	r2,-20(fp)
    1514:	10800104 	addi	r2,r2,4
    1518:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    151c:	003f8c06 	br	1350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001350>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    1520:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    1524:	0001883a 	nop
    1528:	e037883a 	mov	sp,fp
    152c:	df000017 	ldw	fp,0(sp)
    1530:	dec00104 	addi	sp,sp,4
    1534:	f800283a 	ret

00001538 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    1538:	defff804 	addi	sp,sp,-32
    153c:	df000715 	stw	fp,28(sp)
    1540:	df000704 	addi	fp,sp,28
    1544:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1548:	e0bffb17 	ldw	r2,-20(fp)
    154c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1550:	e0bff917 	ldw	r2,-28(fp)
    1554:	10800017 	ldw	r2,0(r2)
    1558:	10800104 	addi	r2,r2,4
    155c:	10800037 	ldwio	r2,0(r2)
    1560:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1564:	e0bffa17 	ldw	r2,-24(fp)
    1568:	1081000c 	andi	r2,r2,1024
    156c:	10000b26 	beq	r2,zero,159c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1570:	e0bff917 	ldw	r2,-28(fp)
    1574:	10800017 	ldw	r2,0(r2)
    1578:	10800104 	addi	r2,r2,4
    157c:	1007883a 	mov	r3,r2
    1580:	e0bff917 	ldw	r2,-28(fp)
    1584:	10800817 	ldw	r2,32(r2)
    1588:	10810014 	ori	r2,r2,1024
    158c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    1590:	e0bff917 	ldw	r2,-28(fp)
    1594:	10000915 	stw	zero,36(r2)
    1598:	00000a06 	br	15c4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    159c:	e0bff917 	ldw	r2,-28(fp)
    15a0:	10c00917 	ldw	r3,36(r2)
    15a4:	00a00034 	movhi	r2,32768
    15a8:	10bfff04 	addi	r2,r2,-4
    15ac:	10c00536 	bltu	r2,r3,15c4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    15b0:	e0bff917 	ldw	r2,-28(fp)
    15b4:	10800917 	ldw	r2,36(r2)
    15b8:	10c00044 	addi	r3,r2,1
    15bc:	e0bff917 	ldw	r2,-28(fp)
    15c0:	10c00915 	stw	r3,36(r2)
    15c4:	00800034 	movhi	r2,0
    15c8:	109d8c04 	addi	r2,r2,30256
    15cc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    15d0:	e037883a 	mov	sp,fp
    15d4:	df000017 	ldw	fp,0(sp)
    15d8:	dec00104 	addi	sp,sp,4
    15dc:	f800283a 	ret

000015e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    15e0:	defffd04 	addi	sp,sp,-12
    15e4:	df000215 	stw	fp,8(sp)
    15e8:	df000204 	addi	fp,sp,8
    15ec:	e13ffe15 	stw	r4,-8(fp)
    15f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    15f4:	00000506 	br	160c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    15f8:	e0bfff17 	ldw	r2,-4(fp)
    15fc:	1090000c 	andi	r2,r2,16384
    1600:	10000226 	beq	r2,zero,160c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    1604:	00bffd44 	movi	r2,-11
    1608:	00000b06 	br	1638 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    160c:	e0bffe17 	ldw	r2,-8(fp)
    1610:	10c00d17 	ldw	r3,52(r2)
    1614:	e0bffe17 	ldw	r2,-8(fp)
    1618:	10800c17 	ldw	r2,48(r2)
    161c:	18800526 	beq	r3,r2,1634 <altera_avalon_jtag_uart_close+0x54>
    1620:	e0bffe17 	ldw	r2,-8(fp)
    1624:	10c00917 	ldw	r3,36(r2)
    1628:	e0bffe17 	ldw	r2,-8(fp)
    162c:	10800117 	ldw	r2,4(r2)
    1630:	18bff136 	bltu	r3,r2,15f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70015f8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1634:	0005883a 	mov	r2,zero
}
    1638:	e037883a 	mov	sp,fp
    163c:	df000017 	ldw	fp,0(sp)
    1640:	dec00104 	addi	sp,sp,4
    1644:	f800283a 	ret

00001648 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1648:	defffa04 	addi	sp,sp,-24
    164c:	df000515 	stw	fp,20(sp)
    1650:	df000504 	addi	fp,sp,20
    1654:	e13ffd15 	stw	r4,-12(fp)
    1658:	e17ffe15 	stw	r5,-8(fp)
    165c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    1660:	00bff9c4 	movi	r2,-25
    1664:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    1668:	e0bffe17 	ldw	r2,-8(fp)
    166c:	10da8060 	cmpeqi	r3,r2,27137
    1670:	1800031e 	bne	r3,zero,1680 <altera_avalon_jtag_uart_ioctl+0x38>
    1674:	109a80a0 	cmpeqi	r2,r2,27138
    1678:	1000181e 	bne	r2,zero,16dc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    167c:	00002906 	br	1724 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1680:	e0bffd17 	ldw	r2,-12(fp)
    1684:	10c00117 	ldw	r3,4(r2)
    1688:	00a00034 	movhi	r2,32768
    168c:	10bfffc4 	addi	r2,r2,-1
    1690:	18802126 	beq	r3,r2,1718 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    1694:	e0bfff17 	ldw	r2,-4(fp)
    1698:	10800017 	ldw	r2,0(r2)
    169c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    16a0:	e0bffc17 	ldw	r2,-16(fp)
    16a4:	10800090 	cmplti	r2,r2,2
    16a8:	1000061e 	bne	r2,zero,16c4 <altera_avalon_jtag_uart_ioctl+0x7c>
    16ac:	e0fffc17 	ldw	r3,-16(fp)
    16b0:	00a00034 	movhi	r2,32768
    16b4:	10bfffc4 	addi	r2,r2,-1
    16b8:	18800226 	beq	r3,r2,16c4 <altera_avalon_jtag_uart_ioctl+0x7c>
    16bc:	e0bffc17 	ldw	r2,-16(fp)
    16c0:	00000206 	br	16cc <altera_avalon_jtag_uart_ioctl+0x84>
    16c4:	00a00034 	movhi	r2,32768
    16c8:	10bfff84 	addi	r2,r2,-2
    16cc:	e0fffd17 	ldw	r3,-12(fp)
    16d0:	18800115 	stw	r2,4(r3)
      rc = 0;
    16d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    16d8:	00000f06 	br	1718 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    16dc:	e0bffd17 	ldw	r2,-12(fp)
    16e0:	10c00117 	ldw	r3,4(r2)
    16e4:	00a00034 	movhi	r2,32768
    16e8:	10bfffc4 	addi	r2,r2,-1
    16ec:	18800c26 	beq	r3,r2,1720 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    16f0:	e0bffd17 	ldw	r2,-12(fp)
    16f4:	10c00917 	ldw	r3,36(r2)
    16f8:	e0bffd17 	ldw	r2,-12(fp)
    16fc:	10800117 	ldw	r2,4(r2)
    1700:	1885803a 	cmpltu	r2,r3,r2
    1704:	10c03fcc 	andi	r3,r2,255
    1708:	e0bfff17 	ldw	r2,-4(fp)
    170c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    1710:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    1714:	00000206 	br	1720 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    1718:	0001883a 	nop
    171c:	00000106 	br	1724 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    1720:	0001883a 	nop

  default:
    break;
  }

  return rc;
    1724:	e0bffb17 	ldw	r2,-20(fp)
}
    1728:	e037883a 	mov	sp,fp
    172c:	df000017 	ldw	fp,0(sp)
    1730:	dec00104 	addi	sp,sp,4
    1734:	f800283a 	ret

00001738 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1738:	defff304 	addi	sp,sp,-52
    173c:	dfc00c15 	stw	ra,48(sp)
    1740:	df000b15 	stw	fp,44(sp)
    1744:	df000b04 	addi	fp,sp,44
    1748:	e13ffc15 	stw	r4,-16(fp)
    174c:	e17ffd15 	stw	r5,-12(fp)
    1750:	e1bffe15 	stw	r6,-8(fp)
    1754:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    1758:	e0bffd17 	ldw	r2,-12(fp)
    175c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1760:	00004706 	br	1880 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1764:	e0bffc17 	ldw	r2,-16(fp)
    1768:	10800a17 	ldw	r2,40(r2)
    176c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    1770:	e0bffc17 	ldw	r2,-16(fp)
    1774:	10800b17 	ldw	r2,44(r2)
    1778:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    177c:	e0fff717 	ldw	r3,-36(fp)
    1780:	e0bff817 	ldw	r2,-32(fp)
    1784:	18800536 	bltu	r3,r2,179c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1788:	e0fff717 	ldw	r3,-36(fp)
    178c:	e0bff817 	ldw	r2,-32(fp)
    1790:	1885c83a 	sub	r2,r3,r2
    1794:	e0bff615 	stw	r2,-40(fp)
    1798:	00000406 	br	17ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    179c:	00c20004 	movi	r3,2048
    17a0:	e0bff817 	ldw	r2,-32(fp)
    17a4:	1885c83a 	sub	r2,r3,r2
    17a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    17ac:	e0bff617 	ldw	r2,-40(fp)
    17b0:	10001e26 	beq	r2,zero,182c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    17b4:	e0fffe17 	ldw	r3,-8(fp)
    17b8:	e0bff617 	ldw	r2,-40(fp)
    17bc:	1880022e 	bgeu	r3,r2,17c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    17c0:	e0bffe17 	ldw	r2,-8(fp)
    17c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    17c8:	e0bffc17 	ldw	r2,-16(fp)
    17cc:	10c00e04 	addi	r3,r2,56
    17d0:	e0bff817 	ldw	r2,-32(fp)
    17d4:	1885883a 	add	r2,r3,r2
    17d8:	e1bff617 	ldw	r6,-40(fp)
    17dc:	100b883a 	mov	r5,r2
    17e0:	e13ff517 	ldw	r4,-44(fp)
    17e4:	00009140 	call	914 <memcpy>
      ptr   += n;
    17e8:	e0fff517 	ldw	r3,-44(fp)
    17ec:	e0bff617 	ldw	r2,-40(fp)
    17f0:	1885883a 	add	r2,r3,r2
    17f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    17f8:	e0fffe17 	ldw	r3,-8(fp)
    17fc:	e0bff617 	ldw	r2,-40(fp)
    1800:	1885c83a 	sub	r2,r3,r2
    1804:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1808:	e0fff817 	ldw	r3,-32(fp)
    180c:	e0bff617 	ldw	r2,-40(fp)
    1810:	1885883a 	add	r2,r3,r2
    1814:	10c1ffcc 	andi	r3,r2,2047
    1818:	e0bffc17 	ldw	r2,-16(fp)
    181c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    1820:	e0bffe17 	ldw	r2,-8(fp)
    1824:	00bfcf16 	blt	zero,r2,1764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001764>
    1828:	00000106 	br	1830 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    182c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    1830:	e0fff517 	ldw	r3,-44(fp)
    1834:	e0bffd17 	ldw	r2,-12(fp)
    1838:	1880141e 	bne	r3,r2,188c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    183c:	e0bfff17 	ldw	r2,-4(fp)
    1840:	1090000c 	andi	r2,r2,16384
    1844:	1000131e 	bne	r2,zero,1894 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1848:	0001883a 	nop
    184c:	e0bffc17 	ldw	r2,-16(fp)
    1850:	10c00a17 	ldw	r3,40(r2)
    1854:	e0bff717 	ldw	r2,-36(fp)
    1858:	1880051e 	bne	r3,r2,1870 <altera_avalon_jtag_uart_read+0x138>
    185c:	e0bffc17 	ldw	r2,-16(fp)
    1860:	10c00917 	ldw	r3,36(r2)
    1864:	e0bffc17 	ldw	r2,-16(fp)
    1868:	10800117 	ldw	r2,4(r2)
    186c:	18bff736 	bltu	r3,r2,184c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700184c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1870:	e0bffc17 	ldw	r2,-16(fp)
    1874:	10c00a17 	ldw	r3,40(r2)
    1878:	e0bff717 	ldw	r2,-36(fp)
    187c:	18800726 	beq	r3,r2,189c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1880:	e0bffe17 	ldw	r2,-8(fp)
    1884:	00bfb716 	blt	zero,r2,1764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001764>
    1888:	00000506 	br	18a0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    188c:	0001883a 	nop
    1890:	00000306 	br	18a0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    1894:	0001883a 	nop
    1898:	00000106 	br	18a0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    189c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    18a0:	e0fff517 	ldw	r3,-44(fp)
    18a4:	e0bffd17 	ldw	r2,-12(fp)
    18a8:	18801826 	beq	r3,r2,190c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    18ac:	0005303a 	rdctl	r2,status
    18b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    18b4:	e0fffb17 	ldw	r3,-20(fp)
    18b8:	00bfff84 	movi	r2,-2
    18bc:	1884703a 	and	r2,r3,r2
    18c0:	1001703a 	wrctl	status,r2
  
  return context;
    18c4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    18c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    18cc:	e0bffc17 	ldw	r2,-16(fp)
    18d0:	10800817 	ldw	r2,32(r2)
    18d4:	10c00054 	ori	r3,r2,1
    18d8:	e0bffc17 	ldw	r2,-16(fp)
    18dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    18e0:	e0bffc17 	ldw	r2,-16(fp)
    18e4:	10800017 	ldw	r2,0(r2)
    18e8:	10800104 	addi	r2,r2,4
    18ec:	1007883a 	mov	r3,r2
    18f0:	e0bffc17 	ldw	r2,-16(fp)
    18f4:	10800817 	ldw	r2,32(r2)
    18f8:	18800035 	stwio	r2,0(r3)
    18fc:	e0bffa17 	ldw	r2,-24(fp)
    1900:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1904:	e0bff917 	ldw	r2,-28(fp)
    1908:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    190c:	e0fff517 	ldw	r3,-44(fp)
    1910:	e0bffd17 	ldw	r2,-12(fp)
    1914:	18800426 	beq	r3,r2,1928 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    1918:	e0fff517 	ldw	r3,-44(fp)
    191c:	e0bffd17 	ldw	r2,-12(fp)
    1920:	1885c83a 	sub	r2,r3,r2
    1924:	00000606 	br	1940 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    1928:	e0bfff17 	ldw	r2,-4(fp)
    192c:	1090000c 	andi	r2,r2,16384
    1930:	10000226 	beq	r2,zero,193c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    1934:	00bffd44 	movi	r2,-11
    1938:	00000106 	br	1940 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    193c:	00bffec4 	movi	r2,-5
}
    1940:	e037883a 	mov	sp,fp
    1944:	dfc00117 	ldw	ra,4(sp)
    1948:	df000017 	ldw	fp,0(sp)
    194c:	dec00204 	addi	sp,sp,8
    1950:	f800283a 	ret

00001954 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1954:	defff304 	addi	sp,sp,-52
    1958:	dfc00c15 	stw	ra,48(sp)
    195c:	df000b15 	stw	fp,44(sp)
    1960:	df000b04 	addi	fp,sp,44
    1964:	e13ffc15 	stw	r4,-16(fp)
    1968:	e17ffd15 	stw	r5,-12(fp)
    196c:	e1bffe15 	stw	r6,-8(fp)
    1970:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    1974:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1978:	e0bffd17 	ldw	r2,-12(fp)
    197c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1980:	00003706 	br	1a60 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1984:	e0bffc17 	ldw	r2,-16(fp)
    1988:	10800c17 	ldw	r2,48(r2)
    198c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    1990:	e0bffc17 	ldw	r2,-16(fp)
    1994:	10800d17 	ldw	r2,52(r2)
    1998:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    199c:	e0fff917 	ldw	r3,-28(fp)
    19a0:	e0bff517 	ldw	r2,-44(fp)
    19a4:	1880062e 	bgeu	r3,r2,19c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    19a8:	e0fff517 	ldw	r3,-44(fp)
    19ac:	e0bff917 	ldw	r2,-28(fp)
    19b0:	1885c83a 	sub	r2,r3,r2
    19b4:	10bfffc4 	addi	r2,r2,-1
    19b8:	e0bff615 	stw	r2,-40(fp)
    19bc:	00000b06 	br	19ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    19c0:	e0bff517 	ldw	r2,-44(fp)
    19c4:	10000526 	beq	r2,zero,19dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    19c8:	00c20004 	movi	r3,2048
    19cc:	e0bff917 	ldw	r2,-28(fp)
    19d0:	1885c83a 	sub	r2,r3,r2
    19d4:	e0bff615 	stw	r2,-40(fp)
    19d8:	00000406 	br	19ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    19dc:	00c1ffc4 	movi	r3,2047
    19e0:	e0bff917 	ldw	r2,-28(fp)
    19e4:	1885c83a 	sub	r2,r3,r2
    19e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    19ec:	e0bff617 	ldw	r2,-40(fp)
    19f0:	10001e26 	beq	r2,zero,1a6c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    19f4:	e0fffe17 	ldw	r3,-8(fp)
    19f8:	e0bff617 	ldw	r2,-40(fp)
    19fc:	1880022e 	bgeu	r3,r2,1a08 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    1a00:	e0bffe17 	ldw	r2,-8(fp)
    1a04:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    1a08:	e0bffc17 	ldw	r2,-16(fp)
    1a0c:	10c20e04 	addi	r3,r2,2104
    1a10:	e0bff917 	ldw	r2,-28(fp)
    1a14:	1885883a 	add	r2,r3,r2
    1a18:	e1bff617 	ldw	r6,-40(fp)
    1a1c:	e17ffd17 	ldw	r5,-12(fp)
    1a20:	1009883a 	mov	r4,r2
    1a24:	00009140 	call	914 <memcpy>
      ptr   += n;
    1a28:	e0fffd17 	ldw	r3,-12(fp)
    1a2c:	e0bff617 	ldw	r2,-40(fp)
    1a30:	1885883a 	add	r2,r3,r2
    1a34:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    1a38:	e0fffe17 	ldw	r3,-8(fp)
    1a3c:	e0bff617 	ldw	r2,-40(fp)
    1a40:	1885c83a 	sub	r2,r3,r2
    1a44:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1a48:	e0fff917 	ldw	r3,-28(fp)
    1a4c:	e0bff617 	ldw	r2,-40(fp)
    1a50:	1885883a 	add	r2,r3,r2
    1a54:	10c1ffcc 	andi	r3,r2,2047
    1a58:	e0bffc17 	ldw	r2,-16(fp)
    1a5c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1a60:	e0bffe17 	ldw	r2,-8(fp)
    1a64:	00bfc716 	blt	zero,r2,1984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001984>
    1a68:	00000106 	br	1a70 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    1a6c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a70:	0005303a 	rdctl	r2,status
    1a74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a78:	e0fffb17 	ldw	r3,-20(fp)
    1a7c:	00bfff84 	movi	r2,-2
    1a80:	1884703a 	and	r2,r3,r2
    1a84:	1001703a 	wrctl	status,r2
  
  return context;
    1a88:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1a8c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1a90:	e0bffc17 	ldw	r2,-16(fp)
    1a94:	10800817 	ldw	r2,32(r2)
    1a98:	10c00094 	ori	r3,r2,2
    1a9c:	e0bffc17 	ldw	r2,-16(fp)
    1aa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1aa4:	e0bffc17 	ldw	r2,-16(fp)
    1aa8:	10800017 	ldw	r2,0(r2)
    1aac:	10800104 	addi	r2,r2,4
    1ab0:	1007883a 	mov	r3,r2
    1ab4:	e0bffc17 	ldw	r2,-16(fp)
    1ab8:	10800817 	ldw	r2,32(r2)
    1abc:	18800035 	stwio	r2,0(r3)
    1ac0:	e0bffa17 	ldw	r2,-24(fp)
    1ac4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1ac8:	e0bff817 	ldw	r2,-32(fp)
    1acc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    1ad0:	e0bffe17 	ldw	r2,-8(fp)
    1ad4:	0080100e 	bge	zero,r2,1b18 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    1ad8:	e0bfff17 	ldw	r2,-4(fp)
    1adc:	1090000c 	andi	r2,r2,16384
    1ae0:	1000101e 	bne	r2,zero,1b24 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1ae4:	0001883a 	nop
    1ae8:	e0bffc17 	ldw	r2,-16(fp)
    1aec:	10c00d17 	ldw	r3,52(r2)
    1af0:	e0bff517 	ldw	r2,-44(fp)
    1af4:	1880051e 	bne	r3,r2,1b0c <altera_avalon_jtag_uart_write+0x1b8>
    1af8:	e0bffc17 	ldw	r2,-16(fp)
    1afc:	10c00917 	ldw	r3,36(r2)
    1b00:	e0bffc17 	ldw	r2,-16(fp)
    1b04:	10800117 	ldw	r2,4(r2)
    1b08:	18bff736 	bltu	r3,r2,1ae8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ae8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    1b0c:	e0bffc17 	ldw	r2,-16(fp)
    1b10:	10800917 	ldw	r2,36(r2)
    1b14:	1000051e 	bne	r2,zero,1b2c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    1b18:	e0bffe17 	ldw	r2,-8(fp)
    1b1c:	00bfd016 	blt	zero,r2,1a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a60>
    1b20:	00000306 	br	1b30 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    1b24:	0001883a 	nop
    1b28:	00000106 	br	1b30 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    1b2c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1b30:	e0fffd17 	ldw	r3,-12(fp)
    1b34:	e0bff717 	ldw	r2,-36(fp)
    1b38:	18800426 	beq	r3,r2,1b4c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    1b3c:	e0fffd17 	ldw	r3,-12(fp)
    1b40:	e0bff717 	ldw	r2,-36(fp)
    1b44:	1885c83a 	sub	r2,r3,r2
    1b48:	00000606 	br	1b64 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    1b4c:	e0bfff17 	ldw	r2,-4(fp)
    1b50:	1090000c 	andi	r2,r2,16384
    1b54:	10000226 	beq	r2,zero,1b60 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    1b58:	00bffd44 	movi	r2,-11
    1b5c:	00000106 	br	1b64 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1b60:	00bffec4 	movi	r2,-5
}
    1b64:	e037883a 	mov	sp,fp
    1b68:	dfc00117 	ldw	ra,4(sp)
    1b6c:	df000017 	ldw	fp,0(sp)
    1b70:	dec00204 	addi	sp,sp,8
    1b74:	f800283a 	ret

00001b78 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1b78:	defff904 	addi	sp,sp,-28
    1b7c:	dfc00615 	stw	ra,24(sp)
    1b80:	df000515 	stw	fp,20(sp)
    1b84:	df000504 	addi	fp,sp,20
    1b88:	e13ffe15 	stw	r4,-8(fp)
    1b8c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1b90:	0007883a 	mov	r3,zero
    1b94:	e0bffe17 	ldw	r2,-8(fp)
    1b98:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1b9c:	e0bffe17 	ldw	r2,-8(fp)
    1ba0:	10800104 	addi	r2,r2,4
    1ba4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1ba8:	0005303a 	rdctl	r2,status
    1bac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1bb0:	e0fffc17 	ldw	r3,-16(fp)
    1bb4:	00bfff84 	movi	r2,-2
    1bb8:	1884703a 	and	r2,r3,r2
    1bbc:	1001703a 	wrctl	status,r2
  
  return context;
    1bc0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    1bc4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    1bc8:	00039200 	call	3920 <alt_tick>
    1bcc:	e0bffb17 	ldw	r2,-20(fp)
    1bd0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1bd4:	e0bffd17 	ldw	r2,-12(fp)
    1bd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    1bdc:	0001883a 	nop
    1be0:	e037883a 	mov	sp,fp
    1be4:	dfc00117 	ldw	ra,4(sp)
    1be8:	df000017 	ldw	fp,0(sp)
    1bec:	dec00204 	addi	sp,sp,8
    1bf0:	f800283a 	ret

00001bf4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1bf4:	defff904 	addi	sp,sp,-28
    1bf8:	dfc00615 	stw	ra,24(sp)
    1bfc:	df000515 	stw	fp,20(sp)
    1c00:	df000504 	addi	fp,sp,20
    1c04:	e13ffc15 	stw	r4,-16(fp)
    1c08:	e17ffd15 	stw	r5,-12(fp)
    1c0c:	e1bffe15 	stw	r6,-8(fp)
    1c10:	e1ffff15 	stw	r7,-4(fp)
    1c14:	e0bfff17 	ldw	r2,-4(fp)
    1c18:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1c1c:	00800034 	movhi	r2,0
    1c20:	109d8c04 	addi	r2,r2,30256
    1c24:	10800017 	ldw	r2,0(r2)
    1c28:	1000041e 	bne	r2,zero,1c3c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    1c2c:	00800034 	movhi	r2,0
    1c30:	109d8c04 	addi	r2,r2,30256
    1c34:	e0fffb17 	ldw	r3,-20(fp)
    1c38:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1c3c:	e0bffc17 	ldw	r2,-16(fp)
    1c40:	10800104 	addi	r2,r2,4
    1c44:	00c001c4 	movi	r3,7
    1c48:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1c4c:	01800034 	movhi	r6,0
    1c50:	3186de04 	addi	r6,r6,7032
    1c54:	e17ffc17 	ldw	r5,-16(fp)
    1c58:	e13ffe17 	ldw	r4,-8(fp)
    1c5c:	0000a5c0 	call	a5c <alt_irq_register>
#endif  
}
    1c60:	0001883a 	nop
    1c64:	e037883a 	mov	sp,fp
    1c68:	dfc00117 	ldw	ra,4(sp)
    1c6c:	df000017 	ldw	fp,0(sp)
    1c70:	dec00204 	addi	sp,sp,8
    1c74:	f800283a 	ret

00001c78 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    1c78:	defffc04 	addi	sp,sp,-16
    1c7c:	df000315 	stw	fp,12(sp)
    1c80:	df000304 	addi	fp,sp,12
    1c84:	e13ffe15 	stw	r4,-8(fp)
    1c88:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    1c8c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    1c90:	e0bfff17 	ldw	r2,-4(fp)
    1c94:	1000061e 	bne	r2,zero,1cb0 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    1c98:	e0bffe17 	ldw	r2,-8(fp)
    1c9c:	1007883a 	mov	r3,r2
    1ca0:	e0bffd03 	ldbu	r2,-12(fp)
    1ca4:	1884b03a 	or	r2,r3,r2
    1ca8:	e0bffd05 	stb	r2,-12(fp)
    1cac:	00000806 	br	1cd0 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    1cb0:	e0bffe17 	ldw	r2,-8(fp)
    1cb4:	1007883a 	mov	r3,r2
    1cb8:	e0bffd03 	ldbu	r2,-12(fp)
    1cbc:	1884b03a 	or	r2,r3,r2
    1cc0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    1cc4:	e0bffd03 	ldbu	r2,-12(fp)
    1cc8:	10801014 	ori	r2,r2,64
    1ccc:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    1cd0:	e0fffd03 	ldbu	r3,-12(fp)
    1cd4:	00bfe004 	movi	r2,-128
    1cd8:	1884b03a 	or	r2,r3,r2
}
    1cdc:	e037883a 	mov	sp,fp
    1ce0:	df000017 	ldw	fp,0(sp)
    1ce4:	dec00104 	addi	sp,sp,4
    1ce8:	f800283a 	ret

00001cec <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    1cec:	defffd04 	addi	sp,sp,-12
    1cf0:	df000215 	stw	fp,8(sp)
    1cf4:	df000204 	addi	fp,sp,8
    1cf8:	e13ffe15 	stw	r4,-8(fp)
    1cfc:	2805883a 	mov	r2,r5
    1d00:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    1d04:	e0bffe17 	ldw	r2,-8(fp)
    1d08:	10800a17 	ldw	r2,40(r2)
    1d0c:	1007883a 	mov	r3,r2
    1d10:	e0bfff03 	ldbu	r2,-4(fp)
    1d14:	18800025 	stbio	r2,0(r3)
}
    1d18:	0001883a 	nop
    1d1c:	e037883a 	mov	sp,fp
    1d20:	df000017 	ldw	fp,0(sp)
    1d24:	dec00104 	addi	sp,sp,4
    1d28:	f800283a 	ret

00001d2c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    1d2c:	defffe04 	addi	sp,sp,-8
    1d30:	df000115 	stw	fp,4(sp)
    1d34:	df000104 	addi	fp,sp,4
    1d38:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    1d3c:	e0bfff17 	ldw	r2,-4(fp)
    1d40:	10800a17 	ldw	r2,40(r2)
    1d44:	1007883a 	mov	r3,r2
    1d48:	00800044 	movi	r2,1
    1d4c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    1d50:	0001883a 	nop
    1d54:	e037883a 	mov	sp,fp
    1d58:	df000017 	ldw	fp,0(sp)
    1d5c:	dec00104 	addi	sp,sp,4
    1d60:	f800283a 	ret

00001d64 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    1d64:	defffc04 	addi	sp,sp,-16
    1d68:	dfc00315 	stw	ra,12(sp)
    1d6c:	df000215 	stw	fp,8(sp)
    1d70:	df000204 	addi	fp,sp,8
    1d74:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    1d78:	01400034 	movhi	r5,0
    1d7c:	29571904 	addi	r5,r5,23652
    1d80:	e13fff17 	ldw	r4,-4(fp)
    1d84:	00033a80 	call	33a8 <alt_find_dev>
    1d88:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1d8c:	e0bffe17 	ldw	r2,-8(fp)
}
    1d90:	e037883a 	mov	sp,fp
    1d94:	dfc00117 	ldw	ra,4(sp)
    1d98:	df000017 	ldw	fp,0(sp)
    1d9c:	dec00204 	addi	sp,sp,8
    1da0:	f800283a 	ret

00001da4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    1da4:	defffb04 	addi	sp,sp,-20
    1da8:	df000415 	stw	fp,16(sp)
    1dac:	df000404 	addi	fp,sp,16
    1db0:	e13ffd15 	stw	r4,-12(fp)
    1db4:	e17ffe15 	stw	r5,-8(fp)
    1db8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    1dbc:	e03ffc15 	stw	zero,-16(fp)
    1dc0:	00000f06 	br	1e00 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    1dc4:	e0bffd17 	ldw	r2,-12(fp)
    1dc8:	10800a17 	ldw	r2,40(r2)
    1dcc:	10800044 	addi	r2,r2,1
    1dd0:	1009883a 	mov	r4,r2
    1dd4:	e0fffe17 	ldw	r3,-8(fp)
    1dd8:	e0bffc17 	ldw	r2,-16(fp)
    1ddc:	1885883a 	add	r2,r3,r2
    1de0:	10800003 	ldbu	r2,0(r2)
    1de4:	10803fcc 	andi	r2,r2,255
    1de8:	1080201c 	xori	r2,r2,128
    1dec:	10bfe004 	addi	r2,r2,-128
    1df0:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    1df4:	e0bffc17 	ldw	r2,-16(fp)
    1df8:	10800044 	addi	r2,r2,1
    1dfc:	e0bffc15 	stw	r2,-16(fp)
    1e00:	e0fffc17 	ldw	r3,-16(fp)
    1e04:	e0bfff17 	ldw	r2,-4(fp)
    1e08:	18bfee36 	bltu	r3,r2,1dc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001dc4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    1e0c:	0001883a 	nop
    1e10:	e037883a 	mov	sp,fp
    1e14:	df000017 	ldw	fp,0(sp)
    1e18:	dec00104 	addi	sp,sp,4
    1e1c:	f800283a 	ret

00001e20 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    1e20:	defffd04 	addi	sp,sp,-12
    1e24:	df000215 	stw	fp,8(sp)
    1e28:	df000204 	addi	fp,sp,8
    1e2c:	e13ffe15 	stw	r4,-8(fp)
    1e30:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    1e34:	00000d06 	br	1e6c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    1e38:	e0bffe17 	ldw	r2,-8(fp)
    1e3c:	10800a17 	ldw	r2,40(r2)
    1e40:	10800044 	addi	r2,r2,1
    1e44:	1007883a 	mov	r3,r2
    1e48:	e0bfff17 	ldw	r2,-4(fp)
    1e4c:	10800003 	ldbu	r2,0(r2)
    1e50:	10803fcc 	andi	r2,r2,255
    1e54:	1080201c 	xori	r2,r2,128
    1e58:	10bfe004 	addi	r2,r2,-128
    1e5c:	18800025 	stbio	r2,0(r3)
		++ptr;
    1e60:	e0bfff17 	ldw	r2,-4(fp)
    1e64:	10800044 	addi	r2,r2,1
    1e68:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    1e6c:	e0bfff17 	ldw	r2,-4(fp)
    1e70:	10800003 	ldbu	r2,0(r2)
    1e74:	10803fcc 	andi	r2,r2,255
    1e78:	1080201c 	xori	r2,r2,128
    1e7c:	10bfe004 	addi	r2,r2,-128
    1e80:	103fed1e 	bne	r2,zero,1e38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e38>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    1e84:	0001883a 	nop
    1e88:	e037883a 	mov	sp,fp
    1e8c:	df000017 	ldw	fp,0(sp)
    1e90:	dec00104 	addi	sp,sp,4
    1e94:	f800283a 	ret

00001e98 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    1e98:	defffb04 	addi	sp,sp,-20
    1e9c:	dfc00415 	stw	ra,16(sp)
    1ea0:	df000315 	stw	fp,12(sp)
    1ea4:	df000304 	addi	fp,sp,12
    1ea8:	e13ffd15 	stw	r4,-12(fp)
    1eac:	e17ffe15 	stw	r5,-8(fp)
    1eb0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    1eb4:	e0bffd17 	ldw	r2,-12(fp)
    1eb8:	10800017 	ldw	r2,0(r2)
    1ebc:	e0ffff17 	ldw	r3,-4(fp)
    1ec0:	180d883a 	mov	r6,r3
    1ec4:	e17ffe17 	ldw	r5,-8(fp)
    1ec8:	1009883a 	mov	r4,r2
    1ecc:	0001da40 	call	1da4 <alt_up_character_lcd_write>
	return 0;
    1ed0:	0005883a 	mov	r2,zero
}
    1ed4:	e037883a 	mov	sp,fp
    1ed8:	dfc00117 	ldw	ra,4(sp)
    1edc:	df000017 	ldw	fp,0(sp)
    1ee0:	dec00204 	addi	sp,sp,8
    1ee4:	f800283a 	ret

00001ee8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    1ee8:	defffa04 	addi	sp,sp,-24
    1eec:	dfc00515 	stw	ra,20(sp)
    1ef0:	df000415 	stw	fp,16(sp)
    1ef4:	df000404 	addi	fp,sp,16
    1ef8:	e13ffd15 	stw	r4,-12(fp)
    1efc:	e17ffe15 	stw	r5,-8(fp)
    1f00:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    1f04:	e0bffe17 	ldw	r2,-8(fp)
    1f08:	10800a28 	cmpgeui	r2,r2,40
    1f0c:	1000031e 	bne	r2,zero,1f1c <alt_up_character_lcd_set_cursor_pos+0x34>
    1f10:	e0bfff17 	ldw	r2,-4(fp)
    1f14:	108000b0 	cmpltui	r2,r2,2
    1f18:	1000021e 	bne	r2,zero,1f24 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    1f1c:	00bfffc4 	movi	r2,-1
    1f20:	00000906 	br	1f48 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    1f24:	e17fff17 	ldw	r5,-4(fp)
    1f28:	e13ffe17 	ldw	r4,-8(fp)
    1f2c:	0001c780 	call	1c78 <get_DDRAM_addr>
    1f30:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    1f34:	e0bffc03 	ldbu	r2,-16(fp)
    1f38:	100b883a 	mov	r5,r2
    1f3c:	e13ffd17 	ldw	r4,-12(fp)
    1f40:	0001cec0 	call	1cec <alt_up_character_lcd_send_cmd>
	return 0;
    1f44:	0005883a 	mov	r2,zero
}
    1f48:	e037883a 	mov	sp,fp
    1f4c:	dfc00117 	ldw	ra,4(sp)
    1f50:	df000017 	ldw	fp,0(sp)
    1f54:	dec00204 	addi	sp,sp,8
    1f58:	f800283a 	ret

00001f5c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1f5c:	defffb04 	addi	sp,sp,-20
    1f60:	dfc00415 	stw	ra,16(sp)
    1f64:	df000315 	stw	fp,12(sp)
    1f68:	df000304 	addi	fp,sp,12
    1f6c:	e13ffe15 	stw	r4,-8(fp)
    1f70:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    1f74:	e0bfff17 	ldw	r2,-4(fp)
    1f78:	10001526 	beq	r2,zero,1fd0 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    1f7c:	e0bfff17 	ldw	r2,-4(fp)
    1f80:	0080020e 	bge	zero,r2,1f8c <alt_up_character_lcd_shift_cursor+0x30>
    1f84:	00800504 	movi	r2,20
    1f88:	00000106 	br	1f90 <alt_up_character_lcd_shift_cursor+0x34>
    1f8c:	00800404 	movi	r2,16
    1f90:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    1f94:	e0bfff17 	ldw	r2,-4(fp)
    1f98:	1000010e 	bge	r2,zero,1fa0 <alt_up_character_lcd_shift_cursor+0x44>
    1f9c:	0085c83a 	sub	r2,zero,r2
    1fa0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1fa4:	00000406 	br	1fb8 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    1fa8:	e0bffd43 	ldbu	r2,-11(fp)
    1fac:	100b883a 	mov	r5,r2
    1fb0:	e13ffe17 	ldw	r4,-8(fp)
    1fb4:	0001cec0 	call	1cec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1fb8:	e0bffd03 	ldbu	r2,-12(fp)
    1fbc:	10ffffc4 	addi	r3,r2,-1
    1fc0:	e0fffd05 	stb	r3,-12(fp)
    1fc4:	10803fcc 	andi	r2,r2,255
    1fc8:	103ff71e 	bne	r2,zero,1fa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001fa8>
    1fcc:	00000106 	br	1fd4 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    1fd0:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    1fd4:	e037883a 	mov	sp,fp
    1fd8:	dfc00117 	ldw	ra,4(sp)
    1fdc:	df000017 	ldw	fp,0(sp)
    1fe0:	dec00204 	addi	sp,sp,8
    1fe4:	f800283a 	ret

00001fe8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1fe8:	defffb04 	addi	sp,sp,-20
    1fec:	dfc00415 	stw	ra,16(sp)
    1ff0:	df000315 	stw	fp,12(sp)
    1ff4:	df000304 	addi	fp,sp,12
    1ff8:	e13ffe15 	stw	r4,-8(fp)
    1ffc:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    2000:	e0bfff17 	ldw	r2,-4(fp)
    2004:	10001526 	beq	r2,zero,205c <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    2008:	e0bfff17 	ldw	r2,-4(fp)
    200c:	0080020e 	bge	zero,r2,2018 <alt_up_character_lcd_shift_display+0x30>
    2010:	00800704 	movi	r2,28
    2014:	00000106 	br	201c <alt_up_character_lcd_shift_display+0x34>
    2018:	00800604 	movi	r2,24
    201c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    2020:	e0bfff17 	ldw	r2,-4(fp)
    2024:	1000010e 	bge	r2,zero,202c <alt_up_character_lcd_shift_display+0x44>
    2028:	0085c83a 	sub	r2,zero,r2
    202c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    2030:	00000406 	br	2044 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    2034:	e0bffd43 	ldbu	r2,-11(fp)
    2038:	100b883a 	mov	r5,r2
    203c:	e13ffe17 	ldw	r4,-8(fp)
    2040:	0001cec0 	call	1cec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    2044:	e0bffd03 	ldbu	r2,-12(fp)
    2048:	10ffffc4 	addi	r3,r2,-1
    204c:	e0fffd05 	stb	r3,-12(fp)
    2050:	10803fcc 	andi	r2,r2,255
    2054:	103ff71e 	bne	r2,zero,2034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002034>
    2058:	00000106 	br	2060 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    205c:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    2060:	e037883a 	mov	sp,fp
    2064:	dfc00117 	ldw	ra,4(sp)
    2068:	df000017 	ldw	fp,0(sp)
    206c:	dec00204 	addi	sp,sp,8
    2070:	f800283a 	ret

00002074 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    2074:	defffa04 	addi	sp,sp,-24
    2078:	dfc00515 	stw	ra,20(sp)
    207c:	df000415 	stw	fp,16(sp)
    2080:	df000404 	addi	fp,sp,16
    2084:	e13ffd15 	stw	r4,-12(fp)
    2088:	e17ffe15 	stw	r5,-8(fp)
    208c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    2090:	e0bffe17 	ldw	r2,-8(fp)
    2094:	10800a28 	cmpgeui	r2,r2,40
    2098:	1000031e 	bne	r2,zero,20a8 <alt_up_character_lcd_erase_pos+0x34>
    209c:	e0bfff17 	ldw	r2,-4(fp)
    20a0:	108000b0 	cmpltui	r2,r2,2
    20a4:	1000021e 	bne	r2,zero,20b0 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    20a8:	00bfffc4 	movi	r2,-1
    20ac:	00000f06 	br	20ec <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    20b0:	e17fff17 	ldw	r5,-4(fp)
    20b4:	e13ffe17 	ldw	r4,-8(fp)
    20b8:	0001c780 	call	1c78 <get_DDRAM_addr>
    20bc:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    20c0:	e0bffc03 	ldbu	r2,-16(fp)
    20c4:	100b883a 	mov	r5,r2
    20c8:	e13ffd17 	ldw	r4,-12(fp)
    20cc:	0001cec0 	call	1cec <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    20d0:	e0bffd17 	ldw	r2,-12(fp)
    20d4:	10800a17 	ldw	r2,40(r2)
    20d8:	10800044 	addi	r2,r2,1
    20dc:	1007883a 	mov	r3,r2
    20e0:	00800084 	movi	r2,2
    20e4:	18800025 	stbio	r2,0(r3)
	return 0;
    20e8:	0005883a 	mov	r2,zero
}
    20ec:	e037883a 	mov	sp,fp
    20f0:	dfc00117 	ldw	ra,4(sp)
    20f4:	df000017 	ldw	fp,0(sp)
    20f8:	dec00204 	addi	sp,sp,8
    20fc:	f800283a 	ret

00002100 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    2100:	defffd04 	addi	sp,sp,-12
    2104:	dfc00215 	stw	ra,8(sp)
    2108:	df000115 	stw	fp,4(sp)
    210c:	df000104 	addi	fp,sp,4
    2110:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    2114:	01400304 	movi	r5,12
    2118:	e13fff17 	ldw	r4,-4(fp)
    211c:	0001cec0 	call	1cec <alt_up_character_lcd_send_cmd>
}
    2120:	0001883a 	nop
    2124:	e037883a 	mov	sp,fp
    2128:	dfc00117 	ldw	ra,4(sp)
    212c:	df000017 	ldw	fp,0(sp)
    2130:	dec00204 	addi	sp,sp,8
    2134:	f800283a 	ret

00002138 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    2138:	defffd04 	addi	sp,sp,-12
    213c:	dfc00215 	stw	ra,8(sp)
    2140:	df000115 	stw	fp,4(sp)
    2144:	df000104 	addi	fp,sp,4
    2148:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    214c:	014003c4 	movi	r5,15
    2150:	e13fff17 	ldw	r4,-4(fp)
    2154:	0001cec0 	call	1cec <alt_up_character_lcd_send_cmd>
}
    2158:	0001883a 	nop
    215c:	e037883a 	mov	sp,fp
    2160:	dfc00117 	ldw	ra,4(sp)
    2164:	df000017 	ldw	fp,0(sp)
    2168:	dec00204 	addi	sp,sp,8
    216c:	f800283a 	ret

00002170 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    2170:	defffd04 	addi	sp,sp,-12
    2174:	df000215 	stw	fp,8(sp)
    2178:	df000204 	addi	fp,sp,8
    217c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    2180:	e0bfff17 	ldw	r2,-4(fp)
    2184:	10800a17 	ldw	r2,40(r2)
    2188:	10800104 	addi	r2,r2,4
    218c:	10800037 	ldwio	r2,0(r2)
    2190:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    2194:	e0bffe17 	ldw	r2,-8(fp)
    2198:	10800054 	ori	r2,r2,1
    219c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    21a0:	e0bfff17 	ldw	r2,-4(fp)
    21a4:	10800a17 	ldw	r2,40(r2)
    21a8:	10800104 	addi	r2,r2,4
    21ac:	1007883a 	mov	r3,r2
    21b0:	e0bffe17 	ldw	r2,-8(fp)
    21b4:	18800035 	stwio	r2,0(r3)
}
    21b8:	0001883a 	nop
    21bc:	e037883a 	mov	sp,fp
    21c0:	df000017 	ldw	fp,0(sp)
    21c4:	dec00104 	addi	sp,sp,4
    21c8:	f800283a 	ret

000021cc <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    21cc:	defffd04 	addi	sp,sp,-12
    21d0:	df000215 	stw	fp,8(sp)
    21d4:	df000204 	addi	fp,sp,8
    21d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    21dc:	e0bfff17 	ldw	r2,-4(fp)
    21e0:	10800a17 	ldw	r2,40(r2)
    21e4:	10800104 	addi	r2,r2,4
    21e8:	10800037 	ldwio	r2,0(r2)
    21ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    21f0:	e0fffe17 	ldw	r3,-8(fp)
    21f4:	00bfff84 	movi	r2,-2
    21f8:	1884703a 	and	r2,r3,r2
    21fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    2200:	e0bfff17 	ldw	r2,-4(fp)
    2204:	10800a17 	ldw	r2,40(r2)
    2208:	10800104 	addi	r2,r2,4
    220c:	1007883a 	mov	r3,r2
    2210:	e0bffe17 	ldw	r2,-8(fp)
    2214:	18800035 	stwio	r2,0(r3)
}
    2218:	0001883a 	nop
    221c:	e037883a 	mov	sp,fp
    2220:	df000017 	ldw	fp,0(sp)
    2224:	dec00104 	addi	sp,sp,4
    2228:	f800283a 	ret

0000222c <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    222c:	defffd04 	addi	sp,sp,-12
    2230:	df000215 	stw	fp,8(sp)
    2234:	df000204 	addi	fp,sp,8
    2238:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    223c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    2240:	e0bfff17 	ldw	r2,-4(fp)
    2244:	10800a17 	ldw	r2,40(r2)
    2248:	10800084 	addi	r2,r2,2
    224c:	1080002b 	ldhuio	r2,0(r2)
    2250:	10bfffcc 	andi	r2,r2,65535
    2254:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    2258:	e0bffe0b 	ldhu	r2,-8(fp)
}
    225c:	e037883a 	mov	sp,fp
    2260:	df000017 	ldw	fp,0(sp)
    2264:	dec00104 	addi	sp,sp,4
    2268:	f800283a 	ret

0000226c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    226c:	defffd04 	addi	sp,sp,-12
    2270:	df000215 	stw	fp,8(sp)
    2274:	df000204 	addi	fp,sp,8
    2278:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    227c:	e0bfff17 	ldw	r2,-4(fp)
    2280:	10800a17 	ldw	r2,40(r2)
    2284:	10800104 	addi	r2,r2,4
    2288:	10800037 	ldwio	r2,0(r2)
    228c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    2290:	e0bffe17 	ldw	r2,-8(fp)
    2294:	1004d43a 	srli	r2,r2,16
}
    2298:	e037883a 	mov	sp,fp
    229c:	df000017 	ldw	fp,0(sp)
    22a0:	dec00104 	addi	sp,sp,4
    22a4:	f800283a 	ret

000022a8 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    22a8:	defffd04 	addi	sp,sp,-12
    22ac:	df000215 	stw	fp,8(sp)
    22b0:	df000204 	addi	fp,sp,8
    22b4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    22b8:	e0bfff17 	ldw	r2,-4(fp)
    22bc:	1080800c 	andi	r2,r2,512
    22c0:	1004d27a 	srli	r2,r2,9
    22c4:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    22c8:	e0bffe17 	ldw	r2,-8(fp)
    22cc:	10000226 	beq	r2,zero,22d8 <alt_up_irda_check_parity+0x30>
    22d0:	00bfffc4 	movi	r2,-1
    22d4:	00000106 	br	22dc <alt_up_irda_check_parity+0x34>
    22d8:	0005883a 	mov	r2,zero
}
    22dc:	e037883a 	mov	sp,fp
    22e0:	df000017 	ldw	fp,0(sp)
    22e4:	dec00104 	addi	sp,sp,4
    22e8:	f800283a 	ret

000022ec <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    22ec:	defffd04 	addi	sp,sp,-12
    22f0:	df000215 	stw	fp,8(sp)
    22f4:	df000204 	addi	fp,sp,8
    22f8:	e13ffe15 	stw	r4,-8(fp)
    22fc:	2805883a 	mov	r2,r5
    2300:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    2304:	e0bffe17 	ldw	r2,-8(fp)
    2308:	10800a17 	ldw	r2,40(r2)
    230c:	1007883a 	mov	r3,r2
    2310:	e0bfff03 	ldbu	r2,-4(fp)
    2314:	18800035 	stwio	r2,0(r3)
	return 0;
    2318:	0005883a 	mov	r2,zero
}
    231c:	e037883a 	mov	sp,fp
    2320:	df000017 	ldw	fp,0(sp)
    2324:	dec00104 	addi	sp,sp,4
    2328:	f800283a 	ret

0000232c <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    232c:	defffa04 	addi	sp,sp,-24
    2330:	dfc00515 	stw	ra,20(sp)
    2334:	df000415 	stw	fp,16(sp)
    2338:	df000404 	addi	fp,sp,16
    233c:	e13ffd15 	stw	r4,-12(fp)
    2340:	e17ffe15 	stw	r5,-8(fp)
    2344:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    2348:	e0bffd17 	ldw	r2,-12(fp)
    234c:	10800a17 	ldw	r2,40(r2)
    2350:	10800037 	ldwio	r2,0(r2)
    2354:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    2358:	e0bffc17 	ldw	r2,-16(fp)
    235c:	1007883a 	mov	r3,r2
    2360:	e0bffe17 	ldw	r2,-8(fp)
    2364:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    2368:	e13ffc17 	ldw	r4,-16(fp)
    236c:	00022a80 	call	22a8 <alt_up_irda_check_parity>
    2370:	1007883a 	mov	r3,r2
    2374:	e0bfff17 	ldw	r2,-4(fp)
    2378:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    237c:	e0bffc17 	ldw	r2,-16(fp)
    2380:	10a0000c 	andi	r2,r2,32768
    2384:	1004d3fa 	srli	r2,r2,15
    2388:	10bfffc4 	addi	r2,r2,-1
}
    238c:	e037883a 	mov	sp,fp
    2390:	dfc00117 	ldw	ra,4(sp)
    2394:	df000017 	ldw	fp,0(sp)
    2398:	dec00204 	addi	sp,sp,8
    239c:	f800283a 	ret

000023a0 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    23a0:	defff804 	addi	sp,sp,-32
    23a4:	dfc00715 	stw	ra,28(sp)
    23a8:	df000615 	stw	fp,24(sp)
    23ac:	df000604 	addi	fp,sp,24
    23b0:	e13ffd15 	stw	r4,-12(fp)
    23b4:	e17ffe15 	stw	r5,-8(fp)
    23b8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    23bc:	e0bffd17 	ldw	r2,-12(fp)
    23c0:	10800017 	ldw	r2,0(r2)
    23c4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    23c8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    23cc:	00000c06 	br	2400 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    23d0:	e0bffe17 	ldw	r2,-8(fp)
    23d4:	10c00044 	addi	r3,r2,1
    23d8:	e0fffe15 	stw	r3,-8(fp)
    23dc:	e0fffc04 	addi	r3,fp,-16
    23e0:	180d883a 	mov	r6,r3
    23e4:	100b883a 	mov	r5,r2
    23e8:	e13ffb17 	ldw	r4,-20(fp)
    23ec:	000232c0 	call	232c <alt_up_irda_read_data>
    23f0:	1000081e 	bne	r2,zero,2414 <alt_up_irda_read_fd+0x74>
			count++;
    23f4:	e0bffa17 	ldw	r2,-24(fp)
    23f8:	10800044 	addi	r2,r2,1
    23fc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    2400:	e0bfff17 	ldw	r2,-4(fp)
    2404:	10ffffc4 	addi	r3,r2,-1
    2408:	e0ffff15 	stw	r3,-4(fp)
    240c:	103ff01e 	bne	r2,zero,23d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023d0>
    2410:	00000106 	br	2418 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    2414:	0001883a 	nop
	}
	return count;
    2418:	e0bffa17 	ldw	r2,-24(fp)
}
    241c:	e037883a 	mov	sp,fp
    2420:	dfc00117 	ldw	ra,4(sp)
    2424:	df000017 	ldw	fp,0(sp)
    2428:	dec00204 	addi	sp,sp,8
    242c:	f800283a 	ret

00002430 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    2430:	defff904 	addi	sp,sp,-28
    2434:	dfc00615 	stw	ra,24(sp)
    2438:	df000515 	stw	fp,20(sp)
    243c:	df000504 	addi	fp,sp,20
    2440:	e13ffd15 	stw	r4,-12(fp)
    2444:	e17ffe15 	stw	r5,-8(fp)
    2448:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    244c:	e0bffd17 	ldw	r2,-12(fp)
    2450:	10800017 	ldw	r2,0(r2)
    2454:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    2458:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    245c:	00000c06 	br	2490 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    2460:	e0bffe17 	ldw	r2,-8(fp)
    2464:	10c00044 	addi	r3,r2,1
    2468:	e0fffe15 	stw	r3,-8(fp)
    246c:	10800003 	ldbu	r2,0(r2)
    2470:	10803fcc 	andi	r2,r2,255
    2474:	100b883a 	mov	r5,r2
    2478:	e13ffc17 	ldw	r4,-16(fp)
    247c:	00022ec0 	call	22ec <alt_up_irda_write_data>
    2480:	1000081e 	bne	r2,zero,24a4 <alt_up_irda_write_fd+0x74>
			count++;
    2484:	e0bffb17 	ldw	r2,-20(fp)
    2488:	10800044 	addi	r2,r2,1
    248c:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    2490:	e0bfff17 	ldw	r2,-4(fp)
    2494:	10ffffc4 	addi	r3,r2,-1
    2498:	e0ffff15 	stw	r3,-4(fp)
    249c:	103ff01e 	bne	r2,zero,2460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002460>
    24a0:	00000106 	br	24a8 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
    24a4:	0001883a 	nop
	}
	return count;
    24a8:	e0bffb17 	ldw	r2,-20(fp)
}
    24ac:	e037883a 	mov	sp,fp
    24b0:	dfc00117 	ldw	ra,4(sp)
    24b4:	df000017 	ldw	fp,0(sp)
    24b8:	dec00204 	addi	sp,sp,8
    24bc:	f800283a 	ret

000024c0 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    24c0:	defffc04 	addi	sp,sp,-16
    24c4:	dfc00315 	stw	ra,12(sp)
    24c8:	df000215 	stw	fp,8(sp)
    24cc:	df000204 	addi	fp,sp,8
    24d0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    24d4:	01400034 	movhi	r5,0
    24d8:	29571904 	addi	r5,r5,23652
    24dc:	e13fff17 	ldw	r4,-4(fp)
    24e0:	00033a80 	call	33a8 <alt_find_dev>
    24e4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    24e8:	e0bffe17 	ldw	r2,-8(fp)
}
    24ec:	e037883a 	mov	sp,fp
    24f0:	dfc00117 	ldw	ra,4(sp)
    24f4:	df000017 	ldw	fp,0(sp)
    24f8:	dec00204 	addi	sp,sp,8
    24fc:	f800283a 	ret

00002500 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    2500:	defffd04 	addi	sp,sp,-12
    2504:	df000215 	stw	fp,8(sp)
    2508:	df000204 	addi	fp,sp,8
    250c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    2510:	e0bfff17 	ldw	r2,-4(fp)
    2514:	1080400c 	andi	r2,r2,256
    2518:	1004d23a 	srli	r2,r2,8
    251c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    2520:	e0bffe03 	ldbu	r2,-8(fp)
}
    2524:	e037883a 	mov	sp,fp
    2528:	df000017 	ldw	fp,0(sp)
    252c:	dec00104 	addi	sp,sp,4
    2530:	f800283a 	ret

00002534 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    2534:	defffd04 	addi	sp,sp,-12
    2538:	df000215 	stw	fp,8(sp)
    253c:	df000204 	addi	fp,sp,8
    2540:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    2544:	e0bfff17 	ldw	r2,-4(fp)
    2548:	1080004c 	andi	r2,r2,1
    254c:	e0bffe05 	stb	r2,-8(fp)
	return re;
    2550:	e0bffe03 	ldbu	r2,-8(fp)
}
    2554:	e037883a 	mov	sp,fp
    2558:	df000017 	ldw	fp,0(sp)
    255c:	dec00104 	addi	sp,sp,4
    2560:	f800283a 	ret

00002564 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    2564:	defffd04 	addi	sp,sp,-12
    2568:	df000215 	stw	fp,8(sp)
    256c:	df000204 	addi	fp,sp,8
    2570:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    2574:	e0bfff17 	ldw	r2,-4(fp)
    2578:	1081000c 	andi	r2,r2,1024
    257c:	1004d2ba 	srli	r2,r2,10
    2580:	e0bffe05 	stb	r2,-8(fp)
	return re;
    2584:	e0bffe03 	ldbu	r2,-8(fp)
}
    2588:	e037883a 	mov	sp,fp
    258c:	df000017 	ldw	fp,0(sp)
    2590:	dec00104 	addi	sp,sp,4
    2594:	f800283a 	ret

00002598 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    2598:	defffd04 	addi	sp,sp,-12
    259c:	df000215 	stw	fp,8(sp)
    25a0:	df000204 	addi	fp,sp,8
    25a4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    25a8:	e0bfff17 	ldw	r2,-4(fp)
    25ac:	1004d43a 	srli	r2,r2,16
    25b0:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    25b4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    25b8:	e037883a 	mov	sp,fp
    25bc:	df000017 	ldw	fp,0(sp)
    25c0:	dec00104 	addi	sp,sp,4
    25c4:	f800283a 	ret

000025c8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    25c8:	defffd04 	addi	sp,sp,-12
    25cc:	df000215 	stw	fp,8(sp)
    25d0:	df000204 	addi	fp,sp,8
    25d4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    25d8:	e0bfff17 	ldw	r2,-4(fp)
    25dc:	10a0000c 	andi	r2,r2,32768
    25e0:	1004d3fa 	srli	r2,r2,15
    25e4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    25e8:	e0bffe03 	ldbu	r2,-8(fp)
}
    25ec:	e037883a 	mov	sp,fp
    25f0:	df000017 	ldw	fp,0(sp)
    25f4:	dec00104 	addi	sp,sp,4
    25f8:	f800283a 	ret

000025fc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    25fc:	defffd04 	addi	sp,sp,-12
    2600:	df000215 	stw	fp,8(sp)
    2604:	df000204 	addi	fp,sp,8
    2608:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    260c:	e0bfff17 	ldw	r2,-4(fp)
    2610:	e0bffe05 	stb	r2,-8(fp)
	return data;
    2614:	e0bffe03 	ldbu	r2,-8(fp)
}
    2618:	e037883a 	mov	sp,fp
    261c:	df000017 	ldw	fp,0(sp)
    2620:	dec00104 	addi	sp,sp,4
    2624:	f800283a 	ret

00002628 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    2628:	defffb04 	addi	sp,sp,-20
    262c:	dfc00415 	stw	ra,16(sp)
    2630:	df000315 	stw	fp,12(sp)
    2634:	df000304 	addi	fp,sp,12
    2638:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    263c:	01403fc4 	movi	r5,255
    2640:	e13fff17 	ldw	r4,-4(fp)
    2644:	00028880 	call	2888 <alt_up_ps2_write_data_byte_with_ack>
    2648:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    264c:	e0bffd17 	ldw	r2,-12(fp)
    2650:	1000211e 	bne	r2,zero,26d8 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    2654:	e0bffe04 	addi	r2,fp,-8
    2658:	100b883a 	mov	r5,r2
    265c:	e13fff17 	ldw	r4,-4(fp)
    2660:	00028ec0 	call	28ec <alt_up_ps2_read_data_byte_timeout>
    2664:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    2668:	e0bffd17 	ldw	r2,-12(fp)
    266c:	10001a1e 	bne	r2,zero,26d8 <alt_up_ps2_init+0xb0>
    2670:	e0bffe03 	ldbu	r2,-8(fp)
    2674:	10803fcc 	andi	r2,r2,255
    2678:	10802a98 	cmpnei	r2,r2,170
    267c:	1000161e 	bne	r2,zero,26d8 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    2680:	e0bffe04 	addi	r2,fp,-8
    2684:	100b883a 	mov	r5,r2
    2688:	e13fff17 	ldw	r4,-4(fp)
    268c:	00028ec0 	call	28ec <alt_up_ps2_read_data_byte_timeout>
    2690:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    2694:	e0bffd17 	ldw	r2,-12(fp)
    2698:	10bfe318 	cmpnei	r2,r2,-116
    269c:	1000041e 	bne	r2,zero,26b0 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    26a0:	e0bfff17 	ldw	r2,-4(fp)
    26a4:	00c00044 	movi	r3,1
    26a8:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    26ac:	00000a06 	br	26d8 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
    26b0:	e0bffd17 	ldw	r2,-12(fp)
    26b4:	1000081e 	bne	r2,zero,26d8 <alt_up_ps2_init+0xb0>
    26b8:	e0bffe03 	ldbu	r2,-8(fp)
    26bc:	10803fcc 	andi	r2,r2,255
    26c0:	1000051e 	bne	r2,zero,26d8 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    26c4:	e0bfff17 	ldw	r2,-4(fp)
    26c8:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    26cc:	01403d04 	movi	r5,244
    26d0:	e13fff17 	ldw	r4,-4(fp)
    26d4:	00027ac0 	call	27ac <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    26d8:	0001883a 	nop
    26dc:	e037883a 	mov	sp,fp
    26e0:	dfc00117 	ldw	ra,4(sp)
    26e4:	df000017 	ldw	fp,0(sp)
    26e8:	dec00204 	addi	sp,sp,8
    26ec:	f800283a 	ret

000026f0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    26f0:	defffd04 	addi	sp,sp,-12
    26f4:	df000215 	stw	fp,8(sp)
    26f8:	df000204 	addi	fp,sp,8
    26fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    2700:	e0bfff17 	ldw	r2,-4(fp)
    2704:	10800a17 	ldw	r2,40(r2)
    2708:	10800104 	addi	r2,r2,4
    270c:	10800037 	ldwio	r2,0(r2)
    2710:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    2714:	e0bffe17 	ldw	r2,-8(fp)
    2718:	10800054 	ori	r2,r2,1
    271c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    2720:	e0bfff17 	ldw	r2,-4(fp)
    2724:	10800a17 	ldw	r2,40(r2)
    2728:	10800104 	addi	r2,r2,4
    272c:	1007883a 	mov	r3,r2
    2730:	e0bffe17 	ldw	r2,-8(fp)
    2734:	18800035 	stwio	r2,0(r3)
}
    2738:	0001883a 	nop
    273c:	e037883a 	mov	sp,fp
    2740:	df000017 	ldw	fp,0(sp)
    2744:	dec00104 	addi	sp,sp,4
    2748:	f800283a 	ret

0000274c <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    274c:	defffd04 	addi	sp,sp,-12
    2750:	df000215 	stw	fp,8(sp)
    2754:	df000204 	addi	fp,sp,8
    2758:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    275c:	e0bfff17 	ldw	r2,-4(fp)
    2760:	10800a17 	ldw	r2,40(r2)
    2764:	10800104 	addi	r2,r2,4
    2768:	10800037 	ldwio	r2,0(r2)
    276c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    2770:	e0fffe17 	ldw	r3,-8(fp)
    2774:	00bfff84 	movi	r2,-2
    2778:	1884703a 	and	r2,r3,r2
    277c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    2780:	e0bfff17 	ldw	r2,-4(fp)
    2784:	10800a17 	ldw	r2,40(r2)
    2788:	10800104 	addi	r2,r2,4
    278c:	1007883a 	mov	r3,r2
    2790:	e0bffe17 	ldw	r2,-8(fp)
    2794:	18800035 	stwio	r2,0(r3)
}
    2798:	0001883a 	nop
    279c:	e037883a 	mov	sp,fp
    27a0:	df000017 	ldw	fp,0(sp)
    27a4:	dec00104 	addi	sp,sp,4
    27a8:	f800283a 	ret

000027ac <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    27ac:	defffb04 	addi	sp,sp,-20
    27b0:	dfc00415 	stw	ra,16(sp)
    27b4:	df000315 	stw	fp,12(sp)
    27b8:	df000304 	addi	fp,sp,12
    27bc:	e13ffe15 	stw	r4,-8(fp)
    27c0:	2805883a 	mov	r2,r5
    27c4:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    27c8:	e0bffe17 	ldw	r2,-8(fp)
    27cc:	10800a17 	ldw	r2,40(r2)
    27d0:	1007883a 	mov	r3,r2
    27d4:	e0bfff03 	ldbu	r2,-4(fp)
    27d8:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    27dc:	e0bffe17 	ldw	r2,-8(fp)
    27e0:	10800a17 	ldw	r2,40(r2)
    27e4:	10800104 	addi	r2,r2,4
    27e8:	10800037 	ldwio	r2,0(r2)
    27ec:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    27f0:	e13ffd17 	ldw	r4,-12(fp)
    27f4:	00025640 	call	2564 <read_CE_bit>
    27f8:	10803fcc 	andi	r2,r2,255
    27fc:	10000226 	beq	r2,zero,2808 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    2800:	00bffec4 	movi	r2,-5
    2804:	00000106 	br	280c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    2808:	0005883a 	mov	r2,zero
}
    280c:	e037883a 	mov	sp,fp
    2810:	dfc00117 	ldw	ra,4(sp)
    2814:	df000017 	ldw	fp,0(sp)
    2818:	dec00204 	addi	sp,sp,8
    281c:	f800283a 	ret

00002820 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    2820:	defffc04 	addi	sp,sp,-16
    2824:	dfc00315 	stw	ra,12(sp)
    2828:	df000215 	stw	fp,8(sp)
    282c:	df000204 	addi	fp,sp,8
    2830:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    2834:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    2838:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    283c:	e0bffe44 	addi	r2,fp,-7
    2840:	100b883a 	mov	r5,r2
    2844:	e13fff17 	ldw	r4,-4(fp)
    2848:	00028ec0 	call	28ec <alt_up_ps2_read_data_byte_timeout>
    284c:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    2850:	e0bffe03 	ldbu	r2,-8(fp)
    2854:	1000061e 	bne	r2,zero,2870 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    2858:	e0bffe43 	ldbu	r2,-7(fp)
    285c:	10803fcc 	andi	r2,r2,255
    2860:	10803e98 	cmpnei	r2,r2,250
    2864:	103ff51e 	bne	r2,zero,283c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700283c>
				return 0;
    2868:	0005883a 	mov	r2,zero
    286c:	00000106 	br	2874 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    2870:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    2874:	e037883a 	mov	sp,fp
    2878:	dfc00117 	ldw	ra,4(sp)
    287c:	df000017 	ldw	fp,0(sp)
    2880:	dec00204 	addi	sp,sp,8
    2884:	f800283a 	ret

00002888 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    2888:	defffa04 	addi	sp,sp,-24
    288c:	dfc00515 	stw	ra,20(sp)
    2890:	df000415 	stw	fp,16(sp)
    2894:	df000404 	addi	fp,sp,16
    2898:	e13ffe15 	stw	r4,-8(fp)
    289c:	2805883a 	mov	r2,r5
    28a0:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    28a4:	e0bfff03 	ldbu	r2,-4(fp)
    28a8:	100b883a 	mov	r5,r2
    28ac:	e13ffe17 	ldw	r4,-8(fp)
    28b0:	00027ac0 	call	27ac <alt_up_ps2_write_data_byte>
    28b4:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    28b8:	e0bffc17 	ldw	r2,-16(fp)
    28bc:	10000226 	beq	r2,zero,28c8 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    28c0:	e0bffc17 	ldw	r2,-16(fp)
    28c4:	00000406 	br	28d8 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    28c8:	e13ffe17 	ldw	r4,-8(fp)
    28cc:	00028200 	call	2820 <alt_up_ps2_wait_for_ack>
    28d0:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    28d4:	e0bffd17 	ldw	r2,-12(fp)
}
    28d8:	e037883a 	mov	sp,fp
    28dc:	dfc00117 	ldw	ra,4(sp)
    28e0:	df000017 	ldw	fp,0(sp)
    28e4:	dec00204 	addi	sp,sp,8
    28e8:	f800283a 	ret

000028ec <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    28ec:	defffa04 	addi	sp,sp,-24
    28f0:	dfc00515 	stw	ra,20(sp)
    28f4:	df000415 	stw	fp,16(sp)
    28f8:	df000404 	addi	fp,sp,16
    28fc:	e13ffe15 	stw	r4,-8(fp)
    2900:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    2904:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    2908:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    290c:	e0bffc17 	ldw	r2,-16(fp)
    2910:	10800044 	addi	r2,r2,1
    2914:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    2918:	e0bffe17 	ldw	r2,-8(fp)
    291c:	10800a17 	ldw	r2,40(r2)
    2920:	10800037 	ldwio	r2,0(r2)
    2924:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    2928:	e13ffd17 	ldw	r4,-12(fp)
    292c:	00025c80 	call	25c8 <read_data_valid>
    2930:	10803fcc 	andi	r2,r2,255
    2934:	10000726 	beq	r2,zero,2954 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    2938:	e13ffd17 	ldw	r4,-12(fp)
    293c:	00025fc0 	call	25fc <read_data_byte>
    2940:	1007883a 	mov	r3,r2
    2944:	e0bfff17 	ldw	r2,-4(fp)
    2948:	10c00005 	stb	r3,0(r2)
			return 0;
    294c:	0005883a 	mov	r2,zero
    2950:	00000806 	br	2974 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    2954:	e0bffe17 	ldw	r2,-8(fp)
    2958:	10800c17 	ldw	r2,48(r2)
    295c:	103feb26 	beq	r2,zero,290c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700290c>
    2960:	e0bffe17 	ldw	r2,-8(fp)
    2964:	10c00c17 	ldw	r3,48(r2)
    2968:	e0bffc17 	ldw	r2,-16(fp)
    296c:	18bfe72e 	bgeu	r3,r2,290c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700290c>
		{
			return -ETIMEDOUT;
    2970:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    2974:	e037883a 	mov	sp,fp
    2978:	dfc00117 	ldw	ra,4(sp)
    297c:	df000017 	ldw	fp,0(sp)
    2980:	dec00204 	addi	sp,sp,8
    2984:	f800283a 	ret

00002988 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    2988:	defffb04 	addi	sp,sp,-20
    298c:	dfc00415 	stw	ra,16(sp)
    2990:	df000315 	stw	fp,12(sp)
    2994:	df000304 	addi	fp,sp,12
    2998:	e13ffe15 	stw	r4,-8(fp)
    299c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    29a0:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    29a4:	e0bffe17 	ldw	r2,-8(fp)
    29a8:	10800a17 	ldw	r2,40(r2)
    29ac:	10800037 	ldwio	r2,0(r2)
    29b0:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    29b4:	e13ffd17 	ldw	r4,-12(fp)
    29b8:	00025c80 	call	25c8 <read_data_valid>
    29bc:	10803fcc 	andi	r2,r2,255
    29c0:	10000726 	beq	r2,zero,29e0 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    29c4:	e13ffd17 	ldw	r4,-12(fp)
    29c8:	00025fc0 	call	25fc <read_data_byte>
    29cc:	1007883a 	mov	r3,r2
    29d0:	e0bfff17 	ldw	r2,-4(fp)
    29d4:	10c00005 	stb	r3,0(r2)
		return 0;
    29d8:	0005883a 	mov	r2,zero
    29dc:	00000106 	br	29e4 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    29e0:	00bfffc4 	movi	r2,-1
}
    29e4:	e037883a 	mov	sp,fp
    29e8:	dfc00117 	ldw	ra,4(sp)
    29ec:	df000017 	ldw	fp,0(sp)
    29f0:	dec00204 	addi	sp,sp,8
    29f4:	f800283a 	ret

000029f8 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    29f8:	defffb04 	addi	sp,sp,-20
    29fc:	dfc00415 	stw	ra,16(sp)
    2a00:	df000315 	stw	fp,12(sp)
    2a04:	df000304 	addi	fp,sp,12
    2a08:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    2a0c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    2a10:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    2a14:	e0bfff17 	ldw	r2,-4(fp)
    2a18:	10800a17 	ldw	r2,40(r2)
    2a1c:	10800037 	ldwio	r2,0(r2)
    2a20:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    2a24:	e13ffe17 	ldw	r4,-8(fp)
    2a28:	00025980 	call	2598 <read_num_bytes_available>
    2a2c:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    2a30:	e0bffd0b 	ldhu	r2,-12(fp)
    2a34:	103ff71e 	bne	r2,zero,2a14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a14>
}
    2a38:	0001883a 	nop
    2a3c:	e037883a 	mov	sp,fp
    2a40:	dfc00117 	ldw	ra,4(sp)
    2a44:	df000017 	ldw	fp,0(sp)
    2a48:	dec00204 	addi	sp,sp,8
    2a4c:	f800283a 	ret

00002a50 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    2a50:	defff804 	addi	sp,sp,-32
    2a54:	dfc00715 	stw	ra,28(sp)
    2a58:	df000615 	stw	fp,24(sp)
    2a5c:	df000604 	addi	fp,sp,24
    2a60:	e13ffd15 	stw	r4,-12(fp)
    2a64:	e17ffe15 	stw	r5,-8(fp)
    2a68:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    2a6c:	e0bffd17 	ldw	r2,-12(fp)
    2a70:	10800017 	ldw	r2,0(r2)
    2a74:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    2a78:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    2a7c:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    2a80:	e0fffc17 	ldw	r3,-16(fp)
    2a84:	e0bfff17 	ldw	r2,-4(fp)
    2a88:	18bffd16 	blt	r3,r2,2a80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a80>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    2a8c:	e0bffe17 	ldw	r2,-8(fp)
    2a90:	10c00044 	addi	r3,r2,1
    2a94:	e0fffe15 	stw	r3,-8(fp)
    2a98:	100b883a 	mov	r5,r2
    2a9c:	e13ffa17 	ldw	r4,-24(fp)
    2aa0:	00028ec0 	call	28ec <alt_up_ps2_read_data_byte_timeout>
    2aa4:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    2aa8:	e0bffb17 	ldw	r2,-20(fp)
    2aac:	10000226 	beq	r2,zero,2ab8 <alt_up_ps2_read_fd+0x68>
			return count;
    2ab0:	e0bffc17 	ldw	r2,-16(fp)
    2ab4:	00000406 	br	2ac8 <alt_up_ps2_read_fd+0x78>
		count++;
    2ab8:	e0bffc17 	ldw	r2,-16(fp)
    2abc:	10800044 	addi	r2,r2,1
    2ac0:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    2ac4:	e0bffc17 	ldw	r2,-16(fp)
}
    2ac8:	e037883a 	mov	sp,fp
    2acc:	dfc00117 	ldw	ra,4(sp)
    2ad0:	df000017 	ldw	fp,0(sp)
    2ad4:	dec00204 	addi	sp,sp,8
    2ad8:	f800283a 	ret

00002adc <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    2adc:	defff804 	addi	sp,sp,-32
    2ae0:	dfc00715 	stw	ra,28(sp)
    2ae4:	df000615 	stw	fp,24(sp)
    2ae8:	df000604 	addi	fp,sp,24
    2aec:	e13ffd15 	stw	r4,-12(fp)
    2af0:	e17ffe15 	stw	r5,-8(fp)
    2af4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    2af8:	e0bffd17 	ldw	r2,-12(fp)
    2afc:	10800017 	ldw	r2,0(r2)
    2b00:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    2b04:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    2b08:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    2b0c:	00001006 	br	2b50 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    2b10:	e0bffe17 	ldw	r2,-8(fp)
    2b14:	10c00044 	addi	r3,r2,1
    2b18:	e0fffe15 	stw	r3,-8(fp)
    2b1c:	10800003 	ldbu	r2,0(r2)
    2b20:	10803fcc 	andi	r2,r2,255
    2b24:	100b883a 	mov	r5,r2
    2b28:	e13ffb17 	ldw	r4,-20(fp)
    2b2c:	00027ac0 	call	27ac <alt_up_ps2_write_data_byte>
    2b30:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    2b34:	e0bffc17 	ldw	r2,-16(fp)
    2b38:	10000226 	beq	r2,zero,2b44 <alt_up_ps2_write_fd+0x68>
			return count;
    2b3c:	e0bffa17 	ldw	r2,-24(fp)
    2b40:	00000706 	br	2b60 <alt_up_ps2_write_fd+0x84>
		count++;
    2b44:	e0bffa17 	ldw	r2,-24(fp)
    2b48:	10800044 	addi	r2,r2,1
    2b4c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    2b50:	e0fffa17 	ldw	r3,-24(fp)
    2b54:	e0bfff17 	ldw	r2,-4(fp)
    2b58:	18bfed16 	blt	r3,r2,2b10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b10>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    2b5c:	e0bffa17 	ldw	r2,-24(fp)
}
    2b60:	e037883a 	mov	sp,fp
    2b64:	dfc00117 	ldw	ra,4(sp)
    2b68:	df000017 	ldw	fp,0(sp)
    2b6c:	dec00204 	addi	sp,sp,8
    2b70:	f800283a 	ret

00002b74 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    2b74:	defffc04 	addi	sp,sp,-16
    2b78:	dfc00315 	stw	ra,12(sp)
    2b7c:	df000215 	stw	fp,8(sp)
    2b80:	df000204 	addi	fp,sp,8
    2b84:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    2b88:	01400034 	movhi	r5,0
    2b8c:	29571904 	addi	r5,r5,23652
    2b90:	e13fff17 	ldw	r4,-4(fp)
    2b94:	00033a80 	call	33a8 <alt_find_dev>
    2b98:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    2b9c:	e0bffe17 	ldw	r2,-8(fp)
}
    2ba0:	e037883a 	mov	sp,fp
    2ba4:	dfc00117 	ldw	ra,4(sp)
    2ba8:	df000017 	ldw	fp,0(sp)
    2bac:	dec00204 	addi	sp,sp,8
    2bb0:	f800283a 	ret

00002bb4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    2bb4:	defffd04 	addi	sp,sp,-12
    2bb8:	df000215 	stw	fp,8(sp)
    2bbc:	df000204 	addi	fp,sp,8
    2bc0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    2bc4:	e0bfff17 	ldw	r2,-4(fp)
    2bc8:	10800a17 	ldw	r2,40(r2)
    2bcc:	10800104 	addi	r2,r2,4
    2bd0:	10800037 	ldwio	r2,0(r2)
    2bd4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    2bd8:	e0bffe17 	ldw	r2,-8(fp)
    2bdc:	10800054 	ori	r2,r2,1
    2be0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    2be4:	e0bfff17 	ldw	r2,-4(fp)
    2be8:	10800a17 	ldw	r2,40(r2)
    2bec:	10800104 	addi	r2,r2,4
    2bf0:	1007883a 	mov	r3,r2
    2bf4:	e0bffe17 	ldw	r2,-8(fp)
    2bf8:	18800035 	stwio	r2,0(r3)
}
    2bfc:	0001883a 	nop
    2c00:	e037883a 	mov	sp,fp
    2c04:	df000017 	ldw	fp,0(sp)
    2c08:	dec00104 	addi	sp,sp,4
    2c0c:	f800283a 	ret

00002c10 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    2c10:	defffd04 	addi	sp,sp,-12
    2c14:	df000215 	stw	fp,8(sp)
    2c18:	df000204 	addi	fp,sp,8
    2c1c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    2c20:	e0bfff17 	ldw	r2,-4(fp)
    2c24:	10800a17 	ldw	r2,40(r2)
    2c28:	10800104 	addi	r2,r2,4
    2c2c:	10800037 	ldwio	r2,0(r2)
    2c30:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    2c34:	e0fffe17 	ldw	r3,-8(fp)
    2c38:	00bfff84 	movi	r2,-2
    2c3c:	1884703a 	and	r2,r3,r2
    2c40:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    2c44:	e0bfff17 	ldw	r2,-4(fp)
    2c48:	10800a17 	ldw	r2,40(r2)
    2c4c:	10800104 	addi	r2,r2,4
    2c50:	1007883a 	mov	r3,r2
    2c54:	e0bffe17 	ldw	r2,-8(fp)
    2c58:	18800035 	stwio	r2,0(r3)
}
    2c5c:	0001883a 	nop
    2c60:	e037883a 	mov	sp,fp
    2c64:	df000017 	ldw	fp,0(sp)
    2c68:	dec00104 	addi	sp,sp,4
    2c6c:	f800283a 	ret

00002c70 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    2c70:	defffd04 	addi	sp,sp,-12
    2c74:	df000215 	stw	fp,8(sp)
    2c78:	df000204 	addi	fp,sp,8
    2c7c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    2c80:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    2c84:	e0bfff17 	ldw	r2,-4(fp)
    2c88:	10800a17 	ldw	r2,40(r2)
    2c8c:	10800084 	addi	r2,r2,2
    2c90:	1080002b 	ldhuio	r2,0(r2)
    2c94:	10bfffcc 	andi	r2,r2,65535
    2c98:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    2c9c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    2ca0:	e037883a 	mov	sp,fp
    2ca4:	df000017 	ldw	fp,0(sp)
    2ca8:	dec00104 	addi	sp,sp,4
    2cac:	f800283a 	ret

00002cb0 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    2cb0:	defffd04 	addi	sp,sp,-12
    2cb4:	df000215 	stw	fp,8(sp)
    2cb8:	df000204 	addi	fp,sp,8
    2cbc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    2cc0:	e0bfff17 	ldw	r2,-4(fp)
    2cc4:	10800a17 	ldw	r2,40(r2)
    2cc8:	10800104 	addi	r2,r2,4
    2ccc:	10800037 	ldwio	r2,0(r2)
    2cd0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    2cd4:	e0bffe17 	ldw	r2,-8(fp)
    2cd8:	1004d43a 	srli	r2,r2,16
}
    2cdc:	e037883a 	mov	sp,fp
    2ce0:	df000017 	ldw	fp,0(sp)
    2ce4:	dec00104 	addi	sp,sp,4
    2ce8:	f800283a 	ret

00002cec <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    2cec:	defffd04 	addi	sp,sp,-12
    2cf0:	df000215 	stw	fp,8(sp)
    2cf4:	df000204 	addi	fp,sp,8
    2cf8:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    2cfc:	e0bfff17 	ldw	r2,-4(fp)
    2d00:	1080800c 	andi	r2,r2,512
    2d04:	1004d27a 	srli	r2,r2,9
    2d08:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    2d0c:	e0bffe17 	ldw	r2,-8(fp)
    2d10:	10000226 	beq	r2,zero,2d1c <alt_up_rs232_check_parity+0x30>
    2d14:	00bfffc4 	movi	r2,-1
    2d18:	00000106 	br	2d20 <alt_up_rs232_check_parity+0x34>
    2d1c:	0005883a 	mov	r2,zero
}
    2d20:	e037883a 	mov	sp,fp
    2d24:	df000017 	ldw	fp,0(sp)
    2d28:	dec00104 	addi	sp,sp,4
    2d2c:	f800283a 	ret

00002d30 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    2d30:	defffd04 	addi	sp,sp,-12
    2d34:	df000215 	stw	fp,8(sp)
    2d38:	df000204 	addi	fp,sp,8
    2d3c:	e13ffe15 	stw	r4,-8(fp)
    2d40:	2805883a 	mov	r2,r5
    2d44:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    2d48:	e0bffe17 	ldw	r2,-8(fp)
    2d4c:	10800a17 	ldw	r2,40(r2)
    2d50:	1007883a 	mov	r3,r2
    2d54:	e0bfff03 	ldbu	r2,-4(fp)
    2d58:	18800035 	stwio	r2,0(r3)
	return 0;
    2d5c:	0005883a 	mov	r2,zero
}
    2d60:	e037883a 	mov	sp,fp
    2d64:	df000017 	ldw	fp,0(sp)
    2d68:	dec00104 	addi	sp,sp,4
    2d6c:	f800283a 	ret

00002d70 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    2d70:	defffa04 	addi	sp,sp,-24
    2d74:	dfc00515 	stw	ra,20(sp)
    2d78:	df000415 	stw	fp,16(sp)
    2d7c:	df000404 	addi	fp,sp,16
    2d80:	e13ffd15 	stw	r4,-12(fp)
    2d84:	e17ffe15 	stw	r5,-8(fp)
    2d88:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    2d8c:	e0bffd17 	ldw	r2,-12(fp)
    2d90:	10800a17 	ldw	r2,40(r2)
    2d94:	10800037 	ldwio	r2,0(r2)
    2d98:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    2d9c:	e0bffc17 	ldw	r2,-16(fp)
    2da0:	1007883a 	mov	r3,r2
    2da4:	e0bffe17 	ldw	r2,-8(fp)
    2da8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    2dac:	e13ffc17 	ldw	r4,-16(fp)
    2db0:	0002cec0 	call	2cec <alt_up_rs232_check_parity>
    2db4:	1007883a 	mov	r3,r2
    2db8:	e0bfff17 	ldw	r2,-4(fp)
    2dbc:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    2dc0:	e0bffc17 	ldw	r2,-16(fp)
    2dc4:	10a0000c 	andi	r2,r2,32768
    2dc8:	1004d3fa 	srli	r2,r2,15
    2dcc:	10bfffc4 	addi	r2,r2,-1
}
    2dd0:	e037883a 	mov	sp,fp
    2dd4:	dfc00117 	ldw	ra,4(sp)
    2dd8:	df000017 	ldw	fp,0(sp)
    2ddc:	dec00204 	addi	sp,sp,8
    2de0:	f800283a 	ret

00002de4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    2de4:	defff804 	addi	sp,sp,-32
    2de8:	dfc00715 	stw	ra,28(sp)
    2dec:	df000615 	stw	fp,24(sp)
    2df0:	df000604 	addi	fp,sp,24
    2df4:	e13ffd15 	stw	r4,-12(fp)
    2df8:	e17ffe15 	stw	r5,-8(fp)
    2dfc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    2e00:	e0bffd17 	ldw	r2,-12(fp)
    2e04:	10800017 	ldw	r2,0(r2)
    2e08:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    2e0c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    2e10:	00000c06 	br	2e44 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    2e14:	e0bffe17 	ldw	r2,-8(fp)
    2e18:	10c00044 	addi	r3,r2,1
    2e1c:	e0fffe15 	stw	r3,-8(fp)
    2e20:	e0fffc04 	addi	r3,fp,-16
    2e24:	180d883a 	mov	r6,r3
    2e28:	100b883a 	mov	r5,r2
    2e2c:	e13ffb17 	ldw	r4,-20(fp)
    2e30:	0002d700 	call	2d70 <alt_up_rs232_read_data>
    2e34:	1000081e 	bne	r2,zero,2e58 <alt_up_rs232_read_fd+0x74>
			count++;
    2e38:	e0bffa17 	ldw	r2,-24(fp)
    2e3c:	10800044 	addi	r2,r2,1
    2e40:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    2e44:	e0bfff17 	ldw	r2,-4(fp)
    2e48:	10ffffc4 	addi	r3,r2,-1
    2e4c:	e0ffff15 	stw	r3,-4(fp)
    2e50:	103ff01e 	bne	r2,zero,2e14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e14>
    2e54:	00000106 	br	2e5c <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    2e58:	0001883a 	nop
	}
	return count;
    2e5c:	e0bffa17 	ldw	r2,-24(fp)
}
    2e60:	e037883a 	mov	sp,fp
    2e64:	dfc00117 	ldw	ra,4(sp)
    2e68:	df000017 	ldw	fp,0(sp)
    2e6c:	dec00204 	addi	sp,sp,8
    2e70:	f800283a 	ret

00002e74 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    2e74:	defff904 	addi	sp,sp,-28
    2e78:	dfc00615 	stw	ra,24(sp)
    2e7c:	df000515 	stw	fp,20(sp)
    2e80:	df000504 	addi	fp,sp,20
    2e84:	e13ffd15 	stw	r4,-12(fp)
    2e88:	e17ffe15 	stw	r5,-8(fp)
    2e8c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    2e90:	e0bffd17 	ldw	r2,-12(fp)
    2e94:	10800017 	ldw	r2,0(r2)
    2e98:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    2e9c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    2ea0:	00000d06 	br	2ed8 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    2ea4:	e0bffe17 	ldw	r2,-8(fp)
    2ea8:	10800003 	ldbu	r2,0(r2)
    2eac:	10803fcc 	andi	r2,r2,255
    2eb0:	100b883a 	mov	r5,r2
    2eb4:	e13ffc17 	ldw	r4,-16(fp)
    2eb8:	0002d300 	call	2d30 <alt_up_rs232_write_data>
    2ebc:	10000b1e 	bne	r2,zero,2eec <alt_up_rs232_write_fd+0x78>
		{
			count++;
    2ec0:	e0bffb17 	ldw	r2,-20(fp)
    2ec4:	10800044 	addi	r2,r2,1
    2ec8:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    2ecc:	e0bffe17 	ldw	r2,-8(fp)
    2ed0:	10800044 	addi	r2,r2,1
    2ed4:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    2ed8:	e0bfff17 	ldw	r2,-4(fp)
    2edc:	10ffffc4 	addi	r3,r2,-1
    2ee0:	e0ffff15 	stw	r3,-4(fp)
    2ee4:	103fef1e 	bne	r2,zero,2ea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ea4>
    2ee8:	00000106 	br	2ef0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
    2eec:	0001883a 	nop
	}
	return count;
    2ef0:	e0bffb17 	ldw	r2,-20(fp)
}
    2ef4:	e037883a 	mov	sp,fp
    2ef8:	dfc00117 	ldw	ra,4(sp)
    2efc:	df000017 	ldw	fp,0(sp)
    2f00:	dec00204 	addi	sp,sp,8
    2f04:	f800283a 	ret

00002f08 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    2f08:	defffc04 	addi	sp,sp,-16
    2f0c:	dfc00315 	stw	ra,12(sp)
    2f10:	df000215 	stw	fp,8(sp)
    2f14:	df000204 	addi	fp,sp,8
    2f18:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    2f1c:	01400034 	movhi	r5,0
    2f20:	29571904 	addi	r5,r5,23652
    2f24:	e13fff17 	ldw	r4,-4(fp)
    2f28:	00033a80 	call	33a8 <alt_find_dev>
    2f2c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    2f30:	e0bffe17 	ldw	r2,-8(fp)
}
    2f34:	e037883a 	mov	sp,fp
    2f38:	dfc00117 	ldw	ra,4(sp)
    2f3c:	df000017 	ldw	fp,0(sp)
    2f40:	dec00204 	addi	sp,sp,8
    2f44:	f800283a 	ret

00002f48 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    2f48:	defff504 	addi	sp,sp,-44
    2f4c:	df000a15 	stw	fp,40(sp)
    2f50:	df000a04 	addi	fp,sp,40
    2f54:	e13ffc15 	stw	r4,-16(fp)
    2f58:	e17ffd15 	stw	r5,-12(fp)
    2f5c:	e1bffe15 	stw	r6,-8(fp)
    2f60:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    2f64:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2f68:	00800034 	movhi	r2,0
    2f6c:	109d8c04 	addi	r2,r2,30256
    2f70:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    2f74:	10003f26 	beq	r2,zero,3074 <alt_alarm_start+0x12c>
  {
    if (alarm)
    2f78:	e0bffc17 	ldw	r2,-16(fp)
    2f7c:	10003b26 	beq	r2,zero,306c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    2f80:	e0bffc17 	ldw	r2,-16(fp)
    2f84:	e0fffe17 	ldw	r3,-8(fp)
    2f88:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    2f8c:	e0bffc17 	ldw	r2,-16(fp)
    2f90:	e0ffff17 	ldw	r3,-4(fp)
    2f94:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f98:	0005303a 	rdctl	r2,status
    2f9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2fa0:	e0fff917 	ldw	r3,-28(fp)
    2fa4:	00bfff84 	movi	r2,-2
    2fa8:	1884703a 	and	r2,r3,r2
    2fac:	1001703a 	wrctl	status,r2
  
  return context;
    2fb0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    2fb4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2fb8:	00800034 	movhi	r2,0
    2fbc:	109d8d04 	addi	r2,r2,30260
    2fc0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    2fc4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    2fc8:	e0fffd17 	ldw	r3,-12(fp)
    2fcc:	e0bff617 	ldw	r2,-40(fp)
    2fd0:	1885883a 	add	r2,r3,r2
    2fd4:	10c00044 	addi	r3,r2,1
    2fd8:	e0bffc17 	ldw	r2,-16(fp)
    2fdc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2fe0:	e0bffc17 	ldw	r2,-16(fp)
    2fe4:	10c00217 	ldw	r3,8(r2)
    2fe8:	e0bff617 	ldw	r2,-40(fp)
    2fec:	1880042e 	bgeu	r3,r2,3000 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    2ff0:	e0bffc17 	ldw	r2,-16(fp)
    2ff4:	00c00044 	movi	r3,1
    2ff8:	10c00405 	stb	r3,16(r2)
    2ffc:	00000206 	br	3008 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    3000:	e0bffc17 	ldw	r2,-16(fp)
    3004:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    3008:	e0fffc17 	ldw	r3,-16(fp)
    300c:	00800034 	movhi	r2,0
    3010:	10971d04 	addi	r2,r2,23668
    3014:	e0bffa15 	stw	r2,-24(fp)
    3018:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    301c:	e0bffb17 	ldw	r2,-20(fp)
    3020:	e0fffa17 	ldw	r3,-24(fp)
    3024:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    3028:	e0bffa17 	ldw	r2,-24(fp)
    302c:	10c00017 	ldw	r3,0(r2)
    3030:	e0bffb17 	ldw	r2,-20(fp)
    3034:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    3038:	e0bffa17 	ldw	r2,-24(fp)
    303c:	10800017 	ldw	r2,0(r2)
    3040:	e0fffb17 	ldw	r3,-20(fp)
    3044:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    3048:	e0bffa17 	ldw	r2,-24(fp)
    304c:	e0fffb17 	ldw	r3,-20(fp)
    3050:	10c00015 	stw	r3,0(r2)
    3054:	e0bff817 	ldw	r2,-32(fp)
    3058:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    305c:	e0bff717 	ldw	r2,-36(fp)
    3060:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    3064:	0005883a 	mov	r2,zero
    3068:	00000306 	br	3078 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    306c:	00bffa84 	movi	r2,-22
    3070:	00000106 	br	3078 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    3074:	00bfde84 	movi	r2,-134
  }
}
    3078:	e037883a 	mov	sp,fp
    307c:	df000017 	ldw	fp,0(sp)
    3080:	dec00104 	addi	sp,sp,4
    3084:	f800283a 	ret

00003088 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3088:	defffe04 	addi	sp,sp,-8
    308c:	dfc00115 	stw	ra,4(sp)
    3090:	df000015 	stw	fp,0(sp)
    3094:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3098:	00800034 	movhi	r2,0
    309c:	10971c04 	addi	r2,r2,23664
    30a0:	10800017 	ldw	r2,0(r2)
    30a4:	10000526 	beq	r2,zero,30bc <alt_get_errno+0x34>
    30a8:	00800034 	movhi	r2,0
    30ac:	10971c04 	addi	r2,r2,23664
    30b0:	10800017 	ldw	r2,0(r2)
    30b4:	103ee83a 	callr	r2
    30b8:	00000206 	br	30c4 <alt_get_errno+0x3c>
    30bc:	00800034 	movhi	r2,0
    30c0:	109d8f04 	addi	r2,r2,30268
}
    30c4:	e037883a 	mov	sp,fp
    30c8:	dfc00117 	ldw	ra,4(sp)
    30cc:	df000017 	ldw	fp,0(sp)
    30d0:	dec00204 	addi	sp,sp,8
    30d4:	f800283a 	ret

000030d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    30d8:	defffb04 	addi	sp,sp,-20
    30dc:	dfc00415 	stw	ra,16(sp)
    30e0:	df000315 	stw	fp,12(sp)
    30e4:	df000304 	addi	fp,sp,12
    30e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    30ec:	e0bfff17 	ldw	r2,-4(fp)
    30f0:	10000616 	blt	r2,zero,310c <close+0x34>
    30f4:	e0bfff17 	ldw	r2,-4(fp)
    30f8:	10c00324 	muli	r3,r2,12
    30fc:	00800034 	movhi	r2,0
    3100:	1095ad04 	addi	r2,r2,22196
    3104:	1885883a 	add	r2,r3,r2
    3108:	00000106 	br	3110 <close+0x38>
    310c:	0005883a 	mov	r2,zero
    3110:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3114:	e0bffd17 	ldw	r2,-12(fp)
    3118:	10001926 	beq	r2,zero,3180 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    311c:	e0bffd17 	ldw	r2,-12(fp)
    3120:	10800017 	ldw	r2,0(r2)
    3124:	10800417 	ldw	r2,16(r2)
    3128:	10000626 	beq	r2,zero,3144 <close+0x6c>
    312c:	e0bffd17 	ldw	r2,-12(fp)
    3130:	10800017 	ldw	r2,0(r2)
    3134:	10800417 	ldw	r2,16(r2)
    3138:	e13ffd17 	ldw	r4,-12(fp)
    313c:	103ee83a 	callr	r2
    3140:	00000106 	br	3148 <close+0x70>
    3144:	0005883a 	mov	r2,zero
    3148:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    314c:	e13fff17 	ldw	r4,-4(fp)
    3150:	00038200 	call	3820 <alt_release_fd>
    if (rval < 0)
    3154:	e0bffe17 	ldw	r2,-8(fp)
    3158:	1000070e 	bge	r2,zero,3178 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    315c:	00030880 	call	3088 <alt_get_errno>
    3160:	1007883a 	mov	r3,r2
    3164:	e0bffe17 	ldw	r2,-8(fp)
    3168:	0085c83a 	sub	r2,zero,r2
    316c:	18800015 	stw	r2,0(r3)
      return -1;
    3170:	00bfffc4 	movi	r2,-1
    3174:	00000706 	br	3194 <close+0xbc>
    }
    return 0;
    3178:	0005883a 	mov	r2,zero
    317c:	00000506 	br	3194 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3180:	00030880 	call	3088 <alt_get_errno>
    3184:	1007883a 	mov	r3,r2
    3188:	00801444 	movi	r2,81
    318c:	18800015 	stw	r2,0(r3)
    return -1;
    3190:	00bfffc4 	movi	r2,-1
  }
}
    3194:	e037883a 	mov	sp,fp
    3198:	dfc00117 	ldw	ra,4(sp)
    319c:	df000017 	ldw	fp,0(sp)
    31a0:	dec00204 	addi	sp,sp,8
    31a4:	f800283a 	ret

000031a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    31a8:	deffff04 	addi	sp,sp,-4
    31ac:	df000015 	stw	fp,0(sp)
    31b0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    31b4:	0001883a 	nop
    31b8:	e037883a 	mov	sp,fp
    31bc:	df000017 	ldw	fp,0(sp)
    31c0:	dec00104 	addi	sp,sp,4
    31c4:	f800283a 	ret

000031c8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    31c8:	defffc04 	addi	sp,sp,-16
    31cc:	df000315 	stw	fp,12(sp)
    31d0:	df000304 	addi	fp,sp,12
    31d4:	e13ffd15 	stw	r4,-12(fp)
    31d8:	e17ffe15 	stw	r5,-8(fp)
    31dc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    31e0:	e0bfff17 	ldw	r2,-4(fp)
}
    31e4:	e037883a 	mov	sp,fp
    31e8:	df000017 	ldw	fp,0(sp)
    31ec:	dec00104 	addi	sp,sp,4
    31f0:	f800283a 	ret

000031f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    31f4:	defffe04 	addi	sp,sp,-8
    31f8:	dfc00115 	stw	ra,4(sp)
    31fc:	df000015 	stw	fp,0(sp)
    3200:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3204:	00800034 	movhi	r2,0
    3208:	10971c04 	addi	r2,r2,23664
    320c:	10800017 	ldw	r2,0(r2)
    3210:	10000526 	beq	r2,zero,3228 <alt_get_errno+0x34>
    3214:	00800034 	movhi	r2,0
    3218:	10971c04 	addi	r2,r2,23664
    321c:	10800017 	ldw	r2,0(r2)
    3220:	103ee83a 	callr	r2
    3224:	00000206 	br	3230 <alt_get_errno+0x3c>
    3228:	00800034 	movhi	r2,0
    322c:	109d8f04 	addi	r2,r2,30268
}
    3230:	e037883a 	mov	sp,fp
    3234:	dfc00117 	ldw	ra,4(sp)
    3238:	df000017 	ldw	fp,0(sp)
    323c:	dec00204 	addi	sp,sp,8
    3240:	f800283a 	ret

00003244 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    3244:	defffa04 	addi	sp,sp,-24
    3248:	dfc00515 	stw	ra,20(sp)
    324c:	df000415 	stw	fp,16(sp)
    3250:	df000404 	addi	fp,sp,16
    3254:	e13ffe15 	stw	r4,-8(fp)
    3258:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    325c:	e0bffe17 	ldw	r2,-8(fp)
    3260:	10000326 	beq	r2,zero,3270 <alt_dev_llist_insert+0x2c>
    3264:	e0bffe17 	ldw	r2,-8(fp)
    3268:	10800217 	ldw	r2,8(r2)
    326c:	1000061e 	bne	r2,zero,3288 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    3270:	00031f40 	call	31f4 <alt_get_errno>
    3274:	1007883a 	mov	r3,r2
    3278:	00800584 	movi	r2,22
    327c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    3280:	00bffa84 	movi	r2,-22
    3284:	00001306 	br	32d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    3288:	e0bffe17 	ldw	r2,-8(fp)
    328c:	e0ffff17 	ldw	r3,-4(fp)
    3290:	e0fffc15 	stw	r3,-16(fp)
    3294:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    3298:	e0bffd17 	ldw	r2,-12(fp)
    329c:	e0fffc17 	ldw	r3,-16(fp)
    32a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    32a4:	e0bffc17 	ldw	r2,-16(fp)
    32a8:	10c00017 	ldw	r3,0(r2)
    32ac:	e0bffd17 	ldw	r2,-12(fp)
    32b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    32b4:	e0bffc17 	ldw	r2,-16(fp)
    32b8:	10800017 	ldw	r2,0(r2)
    32bc:	e0fffd17 	ldw	r3,-12(fp)
    32c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    32c4:	e0bffc17 	ldw	r2,-16(fp)
    32c8:	e0fffd17 	ldw	r3,-12(fp)
    32cc:	10c00015 	stw	r3,0(r2)

  return 0;  
    32d0:	0005883a 	mov	r2,zero
}
    32d4:	e037883a 	mov	sp,fp
    32d8:	dfc00117 	ldw	ra,4(sp)
    32dc:	df000017 	ldw	fp,0(sp)
    32e0:	dec00204 	addi	sp,sp,8
    32e4:	f800283a 	ret

000032e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    32e8:	defffd04 	addi	sp,sp,-12
    32ec:	dfc00215 	stw	ra,8(sp)
    32f0:	df000115 	stw	fp,4(sp)
    32f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    32f8:	00800034 	movhi	r2,0
    32fc:	10905a04 	addi	r2,r2,16744
    3300:	e0bfff15 	stw	r2,-4(fp)
    3304:	00000606 	br	3320 <_do_ctors+0x38>
        (*ctor) (); 
    3308:	e0bfff17 	ldw	r2,-4(fp)
    330c:	10800017 	ldw	r2,0(r2)
    3310:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3314:	e0bfff17 	ldw	r2,-4(fp)
    3318:	10bfff04 	addi	r2,r2,-4
    331c:	e0bfff15 	stw	r2,-4(fp)
    3320:	e0ffff17 	ldw	r3,-4(fp)
    3324:	00800034 	movhi	r2,0
    3328:	10905b04 	addi	r2,r2,16748
    332c:	18bff62e 	bgeu	r3,r2,3308 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003308>
        (*ctor) (); 
}
    3330:	0001883a 	nop
    3334:	e037883a 	mov	sp,fp
    3338:	dfc00117 	ldw	ra,4(sp)
    333c:	df000017 	ldw	fp,0(sp)
    3340:	dec00204 	addi	sp,sp,8
    3344:	f800283a 	ret

00003348 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    3348:	defffd04 	addi	sp,sp,-12
    334c:	dfc00215 	stw	ra,8(sp)
    3350:	df000115 	stw	fp,4(sp)
    3354:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3358:	00800034 	movhi	r2,0
    335c:	10905a04 	addi	r2,r2,16744
    3360:	e0bfff15 	stw	r2,-4(fp)
    3364:	00000606 	br	3380 <_do_dtors+0x38>
        (*dtor) (); 
    3368:	e0bfff17 	ldw	r2,-4(fp)
    336c:	10800017 	ldw	r2,0(r2)
    3370:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3374:	e0bfff17 	ldw	r2,-4(fp)
    3378:	10bfff04 	addi	r2,r2,-4
    337c:	e0bfff15 	stw	r2,-4(fp)
    3380:	e0ffff17 	ldw	r3,-4(fp)
    3384:	00800034 	movhi	r2,0
    3388:	10905b04 	addi	r2,r2,16748
    338c:	18bff62e 	bgeu	r3,r2,3368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003368>
        (*dtor) (); 
}
    3390:	0001883a 	nop
    3394:	e037883a 	mov	sp,fp
    3398:	dfc00117 	ldw	ra,4(sp)
    339c:	df000017 	ldw	fp,0(sp)
    33a0:	dec00204 	addi	sp,sp,8
    33a4:	f800283a 	ret

000033a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    33a8:	defffa04 	addi	sp,sp,-24
    33ac:	dfc00515 	stw	ra,20(sp)
    33b0:	df000415 	stw	fp,16(sp)
    33b4:	df000404 	addi	fp,sp,16
    33b8:	e13ffe15 	stw	r4,-8(fp)
    33bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    33c0:	e0bfff17 	ldw	r2,-4(fp)
    33c4:	10800017 	ldw	r2,0(r2)
    33c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    33cc:	e13ffe17 	ldw	r4,-8(fp)
    33d0:	0003e080 	call	3e08 <strlen>
    33d4:	10800044 	addi	r2,r2,1
    33d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    33dc:	00000d06 	br	3414 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    33e0:	e0bffc17 	ldw	r2,-16(fp)
    33e4:	10800217 	ldw	r2,8(r2)
    33e8:	e0fffd17 	ldw	r3,-12(fp)
    33ec:	180d883a 	mov	r6,r3
    33f0:	e17ffe17 	ldw	r5,-8(fp)
    33f4:	1009883a 	mov	r4,r2
    33f8:	0003d8c0 	call	3d8c <memcmp>
    33fc:	1000021e 	bne	r2,zero,3408 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    3400:	e0bffc17 	ldw	r2,-16(fp)
    3404:	00000706 	br	3424 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    3408:	e0bffc17 	ldw	r2,-16(fp)
    340c:	10800017 	ldw	r2,0(r2)
    3410:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3414:	e0fffc17 	ldw	r3,-16(fp)
    3418:	e0bfff17 	ldw	r2,-4(fp)
    341c:	18bff01e 	bne	r3,r2,33e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    3420:	0005883a 	mov	r2,zero
}
    3424:	e037883a 	mov	sp,fp
    3428:	dfc00117 	ldw	ra,4(sp)
    342c:	df000017 	ldw	fp,0(sp)
    3430:	dec00204 	addi	sp,sp,8
    3434:	f800283a 	ret

00003438 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    3438:	defffe04 	addi	sp,sp,-8
    343c:	dfc00115 	stw	ra,4(sp)
    3440:	df000015 	stw	fp,0(sp)
    3444:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    3448:	01440004 	movi	r5,4096
    344c:	0009883a 	mov	r4,zero
    3450:	0003c140 	call	3c14 <alt_icache_flush>
#endif
}
    3454:	0001883a 	nop
    3458:	e037883a 	mov	sp,fp
    345c:	dfc00117 	ldw	ra,4(sp)
    3460:	df000017 	ldw	fp,0(sp)
    3464:	dec00204 	addi	sp,sp,8
    3468:	f800283a 	ret

0000346c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    346c:	defff904 	addi	sp,sp,-28
    3470:	dfc00615 	stw	ra,24(sp)
    3474:	df000515 	stw	fp,20(sp)
    3478:	df000504 	addi	fp,sp,20
    347c:	e13ffc15 	stw	r4,-16(fp)
    3480:	e17ffd15 	stw	r5,-12(fp)
    3484:	e1bffe15 	stw	r6,-8(fp)
    3488:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    348c:	e1bfff17 	ldw	r6,-4(fp)
    3490:	e17ffe17 	ldw	r5,-8(fp)
    3494:	e13ffd17 	ldw	r4,-12(fp)
    3498:	00036c80 	call	36c8 <open>
    349c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    34a0:	e0bffb17 	ldw	r2,-20(fp)
    34a4:	10001c16 	blt	r2,zero,3518 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    34a8:	00800034 	movhi	r2,0
    34ac:	1095ad04 	addi	r2,r2,22196
    34b0:	e0fffb17 	ldw	r3,-20(fp)
    34b4:	18c00324 	muli	r3,r3,12
    34b8:	10c5883a 	add	r2,r2,r3
    34bc:	10c00017 	ldw	r3,0(r2)
    34c0:	e0bffc17 	ldw	r2,-16(fp)
    34c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    34c8:	00800034 	movhi	r2,0
    34cc:	1095ad04 	addi	r2,r2,22196
    34d0:	e0fffb17 	ldw	r3,-20(fp)
    34d4:	18c00324 	muli	r3,r3,12
    34d8:	10c5883a 	add	r2,r2,r3
    34dc:	10800104 	addi	r2,r2,4
    34e0:	10c00017 	ldw	r3,0(r2)
    34e4:	e0bffc17 	ldw	r2,-16(fp)
    34e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    34ec:	00800034 	movhi	r2,0
    34f0:	1095ad04 	addi	r2,r2,22196
    34f4:	e0fffb17 	ldw	r3,-20(fp)
    34f8:	18c00324 	muli	r3,r3,12
    34fc:	10c5883a 	add	r2,r2,r3
    3500:	10800204 	addi	r2,r2,8
    3504:	10c00017 	ldw	r3,0(r2)
    3508:	e0bffc17 	ldw	r2,-16(fp)
    350c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    3510:	e13ffb17 	ldw	r4,-20(fp)
    3514:	00038200 	call	3820 <alt_release_fd>
  }
} 
    3518:	0001883a 	nop
    351c:	e037883a 	mov	sp,fp
    3520:	dfc00117 	ldw	ra,4(sp)
    3524:	df000017 	ldw	fp,0(sp)
    3528:	dec00204 	addi	sp,sp,8
    352c:	f800283a 	ret

00003530 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    3530:	defffb04 	addi	sp,sp,-20
    3534:	dfc00415 	stw	ra,16(sp)
    3538:	df000315 	stw	fp,12(sp)
    353c:	df000304 	addi	fp,sp,12
    3540:	e13ffd15 	stw	r4,-12(fp)
    3544:	e17ffe15 	stw	r5,-8(fp)
    3548:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    354c:	01c07fc4 	movi	r7,511
    3550:	01800044 	movi	r6,1
    3554:	e17ffd17 	ldw	r5,-12(fp)
    3558:	01000034 	movhi	r4,0
    355c:	2115b004 	addi	r4,r4,22208
    3560:	000346c0 	call	346c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    3564:	01c07fc4 	movi	r7,511
    3568:	000d883a 	mov	r6,zero
    356c:	e17ffe17 	ldw	r5,-8(fp)
    3570:	01000034 	movhi	r4,0
    3574:	2115ad04 	addi	r4,r4,22196
    3578:	000346c0 	call	346c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    357c:	01c07fc4 	movi	r7,511
    3580:	01800044 	movi	r6,1
    3584:	e17fff17 	ldw	r5,-4(fp)
    3588:	01000034 	movhi	r4,0
    358c:	2115b304 	addi	r4,r4,22220
    3590:	000346c0 	call	346c <alt_open_fd>
}  
    3594:	0001883a 	nop
    3598:	e037883a 	mov	sp,fp
    359c:	dfc00117 	ldw	ra,4(sp)
    35a0:	df000017 	ldw	fp,0(sp)
    35a4:	dec00204 	addi	sp,sp,8
    35a8:	f800283a 	ret

000035ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    35ac:	defffe04 	addi	sp,sp,-8
    35b0:	dfc00115 	stw	ra,4(sp)
    35b4:	df000015 	stw	fp,0(sp)
    35b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    35bc:	00800034 	movhi	r2,0
    35c0:	10971c04 	addi	r2,r2,23664
    35c4:	10800017 	ldw	r2,0(r2)
    35c8:	10000526 	beq	r2,zero,35e0 <alt_get_errno+0x34>
    35cc:	00800034 	movhi	r2,0
    35d0:	10971c04 	addi	r2,r2,23664
    35d4:	10800017 	ldw	r2,0(r2)
    35d8:	103ee83a 	callr	r2
    35dc:	00000206 	br	35e8 <alt_get_errno+0x3c>
    35e0:	00800034 	movhi	r2,0
    35e4:	109d8f04 	addi	r2,r2,30268
}
    35e8:	e037883a 	mov	sp,fp
    35ec:	dfc00117 	ldw	ra,4(sp)
    35f0:	df000017 	ldw	fp,0(sp)
    35f4:	dec00204 	addi	sp,sp,8
    35f8:	f800283a 	ret

000035fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    35fc:	defffd04 	addi	sp,sp,-12
    3600:	df000215 	stw	fp,8(sp)
    3604:	df000204 	addi	fp,sp,8
    3608:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    360c:	e0bfff17 	ldw	r2,-4(fp)
    3610:	10800217 	ldw	r2,8(r2)
    3614:	10d00034 	orhi	r3,r2,16384
    3618:	e0bfff17 	ldw	r2,-4(fp)
    361c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    3620:	e03ffe15 	stw	zero,-8(fp)
    3624:	00001d06 	br	369c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    3628:	00800034 	movhi	r2,0
    362c:	1095ad04 	addi	r2,r2,22196
    3630:	e0fffe17 	ldw	r3,-8(fp)
    3634:	18c00324 	muli	r3,r3,12
    3638:	10c5883a 	add	r2,r2,r3
    363c:	10c00017 	ldw	r3,0(r2)
    3640:	e0bfff17 	ldw	r2,-4(fp)
    3644:	10800017 	ldw	r2,0(r2)
    3648:	1880111e 	bne	r3,r2,3690 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    364c:	00800034 	movhi	r2,0
    3650:	1095ad04 	addi	r2,r2,22196
    3654:	e0fffe17 	ldw	r3,-8(fp)
    3658:	18c00324 	muli	r3,r3,12
    365c:	10c5883a 	add	r2,r2,r3
    3660:	10800204 	addi	r2,r2,8
    3664:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    3668:	1000090e 	bge	r2,zero,3690 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    366c:	e0bffe17 	ldw	r2,-8(fp)
    3670:	10c00324 	muli	r3,r2,12
    3674:	00800034 	movhi	r2,0
    3678:	1095ad04 	addi	r2,r2,22196
    367c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    3680:	e0bfff17 	ldw	r2,-4(fp)
    3684:	18800226 	beq	r3,r2,3690 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    3688:	00bffcc4 	movi	r2,-13
    368c:	00000a06 	br	36b8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    3690:	e0bffe17 	ldw	r2,-8(fp)
    3694:	10800044 	addi	r2,r2,1
    3698:	e0bffe15 	stw	r2,-8(fp)
    369c:	00800034 	movhi	r2,0
    36a0:	10971b04 	addi	r2,r2,23660
    36a4:	10800017 	ldw	r2,0(r2)
    36a8:	1007883a 	mov	r3,r2
    36ac:	e0bffe17 	ldw	r2,-8(fp)
    36b0:	18bfdd2e 	bgeu	r3,r2,3628 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003628>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    36b4:	0005883a 	mov	r2,zero
}
    36b8:	e037883a 	mov	sp,fp
    36bc:	df000017 	ldw	fp,0(sp)
    36c0:	dec00104 	addi	sp,sp,4
    36c4:	f800283a 	ret

000036c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    36c8:	defff604 	addi	sp,sp,-40
    36cc:	dfc00915 	stw	ra,36(sp)
    36d0:	df000815 	stw	fp,32(sp)
    36d4:	df000804 	addi	fp,sp,32
    36d8:	e13ffd15 	stw	r4,-12(fp)
    36dc:	e17ffe15 	stw	r5,-8(fp)
    36e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    36e4:	00bfffc4 	movi	r2,-1
    36e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    36ec:	00bffb44 	movi	r2,-19
    36f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    36f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    36f8:	01400034 	movhi	r5,0
    36fc:	29571904 	addi	r5,r5,23652
    3700:	e13ffd17 	ldw	r4,-12(fp)
    3704:	00033a80 	call	33a8 <alt_find_dev>
    3708:	e0bff815 	stw	r2,-32(fp)
    370c:	e0bff817 	ldw	r2,-32(fp)
    3710:	1000051e 	bne	r2,zero,3728 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    3714:	e13ffd17 	ldw	r4,-12(fp)
    3718:	0003a4c0 	call	3a4c <alt_find_file>
    371c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    3720:	00800044 	movi	r2,1
    3724:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    3728:	e0bff817 	ldw	r2,-32(fp)
    372c:	10002926 	beq	r2,zero,37d4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    3730:	e13ff817 	ldw	r4,-32(fp)
    3734:	0003b600 	call	3b60 <alt_get_fd>
    3738:	e0bff915 	stw	r2,-28(fp)
    373c:	e0bff917 	ldw	r2,-28(fp)
    3740:	1000030e 	bge	r2,zero,3750 <open+0x88>
    {
      status = index;
    3744:	e0bff917 	ldw	r2,-28(fp)
    3748:	e0bffa15 	stw	r2,-24(fp)
    374c:	00002306 	br	37dc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    3750:	e0bff917 	ldw	r2,-28(fp)
    3754:	10c00324 	muli	r3,r2,12
    3758:	00800034 	movhi	r2,0
    375c:	1095ad04 	addi	r2,r2,22196
    3760:	1885883a 	add	r2,r3,r2
    3764:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    3768:	e0fffe17 	ldw	r3,-8(fp)
    376c:	00900034 	movhi	r2,16384
    3770:	10bfffc4 	addi	r2,r2,-1
    3774:	1886703a 	and	r3,r3,r2
    3778:	e0bffc17 	ldw	r2,-16(fp)
    377c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    3780:	e0bffb17 	ldw	r2,-20(fp)
    3784:	1000051e 	bne	r2,zero,379c <open+0xd4>
    3788:	e13ffc17 	ldw	r4,-16(fp)
    378c:	00035fc0 	call	35fc <alt_file_locked>
    3790:	e0bffa15 	stw	r2,-24(fp)
    3794:	e0bffa17 	ldw	r2,-24(fp)
    3798:	10001016 	blt	r2,zero,37dc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    379c:	e0bff817 	ldw	r2,-32(fp)
    37a0:	10800317 	ldw	r2,12(r2)
    37a4:	10000826 	beq	r2,zero,37c8 <open+0x100>
    37a8:	e0bff817 	ldw	r2,-32(fp)
    37ac:	10800317 	ldw	r2,12(r2)
    37b0:	e1ffff17 	ldw	r7,-4(fp)
    37b4:	e1bffe17 	ldw	r6,-8(fp)
    37b8:	e17ffd17 	ldw	r5,-12(fp)
    37bc:	e13ffc17 	ldw	r4,-16(fp)
    37c0:	103ee83a 	callr	r2
    37c4:	00000106 	br	37cc <open+0x104>
    37c8:	0005883a 	mov	r2,zero
    37cc:	e0bffa15 	stw	r2,-24(fp)
    37d0:	00000206 	br	37dc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    37d4:	00bffb44 	movi	r2,-19
    37d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    37dc:	e0bffa17 	ldw	r2,-24(fp)
    37e0:	1000090e 	bge	r2,zero,3808 <open+0x140>
  {
    alt_release_fd (index);  
    37e4:	e13ff917 	ldw	r4,-28(fp)
    37e8:	00038200 	call	3820 <alt_release_fd>
    ALT_ERRNO = -status;
    37ec:	00035ac0 	call	35ac <alt_get_errno>
    37f0:	1007883a 	mov	r3,r2
    37f4:	e0bffa17 	ldw	r2,-24(fp)
    37f8:	0085c83a 	sub	r2,zero,r2
    37fc:	18800015 	stw	r2,0(r3)
    return -1;
    3800:	00bfffc4 	movi	r2,-1
    3804:	00000106 	br	380c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    3808:	e0bff917 	ldw	r2,-28(fp)
}
    380c:	e037883a 	mov	sp,fp
    3810:	dfc00117 	ldw	ra,4(sp)
    3814:	df000017 	ldw	fp,0(sp)
    3818:	dec00204 	addi	sp,sp,8
    381c:	f800283a 	ret

00003820 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3820:	defffe04 	addi	sp,sp,-8
    3824:	df000115 	stw	fp,4(sp)
    3828:	df000104 	addi	fp,sp,4
    382c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3830:	e0bfff17 	ldw	r2,-4(fp)
    3834:	108000d0 	cmplti	r2,r2,3
    3838:	10000d1e 	bne	r2,zero,3870 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    383c:	00800034 	movhi	r2,0
    3840:	1095ad04 	addi	r2,r2,22196
    3844:	e0ffff17 	ldw	r3,-4(fp)
    3848:	18c00324 	muli	r3,r3,12
    384c:	10c5883a 	add	r2,r2,r3
    3850:	10800204 	addi	r2,r2,8
    3854:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3858:	00800034 	movhi	r2,0
    385c:	1095ad04 	addi	r2,r2,22196
    3860:	e0ffff17 	ldw	r3,-4(fp)
    3864:	18c00324 	muli	r3,r3,12
    3868:	10c5883a 	add	r2,r2,r3
    386c:	10000015 	stw	zero,0(r2)
  }
}
    3870:	0001883a 	nop
    3874:	e037883a 	mov	sp,fp
    3878:	df000017 	ldw	fp,0(sp)
    387c:	dec00104 	addi	sp,sp,4
    3880:	f800283a 	ret

00003884 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    3884:	defffa04 	addi	sp,sp,-24
    3888:	df000515 	stw	fp,20(sp)
    388c:	df000504 	addi	fp,sp,20
    3890:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3894:	0005303a 	rdctl	r2,status
    3898:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    389c:	e0fffc17 	ldw	r3,-16(fp)
    38a0:	00bfff84 	movi	r2,-2
    38a4:	1884703a 	and	r2,r3,r2
    38a8:	1001703a 	wrctl	status,r2
  
  return context;
    38ac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    38b0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    38b4:	e0bfff17 	ldw	r2,-4(fp)
    38b8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    38bc:	e0bffd17 	ldw	r2,-12(fp)
    38c0:	10800017 	ldw	r2,0(r2)
    38c4:	e0fffd17 	ldw	r3,-12(fp)
    38c8:	18c00117 	ldw	r3,4(r3)
    38cc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    38d0:	e0bffd17 	ldw	r2,-12(fp)
    38d4:	10800117 	ldw	r2,4(r2)
    38d8:	e0fffd17 	ldw	r3,-12(fp)
    38dc:	18c00017 	ldw	r3,0(r3)
    38e0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    38e4:	e0bffd17 	ldw	r2,-12(fp)
    38e8:	e0fffd17 	ldw	r3,-12(fp)
    38ec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    38f0:	e0bffd17 	ldw	r2,-12(fp)
    38f4:	e0fffd17 	ldw	r3,-12(fp)
    38f8:	10c00015 	stw	r3,0(r2)
    38fc:	e0bffb17 	ldw	r2,-20(fp)
    3900:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3904:	e0bffe17 	ldw	r2,-8(fp)
    3908:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    390c:	0001883a 	nop
    3910:	e037883a 	mov	sp,fp
    3914:	df000017 	ldw	fp,0(sp)
    3918:	dec00104 	addi	sp,sp,4
    391c:	f800283a 	ret

00003920 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    3920:	defffb04 	addi	sp,sp,-20
    3924:	dfc00415 	stw	ra,16(sp)
    3928:	df000315 	stw	fp,12(sp)
    392c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    3930:	d0a00717 	ldw	r2,-32740(gp)
    3934:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    3938:	d0a67717 	ldw	r2,-26148(gp)
    393c:	10800044 	addi	r2,r2,1
    3940:	d0a67715 	stw	r2,-26148(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3944:	00002e06 	br	3a00 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    3948:	e0bffd17 	ldw	r2,-12(fp)
    394c:	10800017 	ldw	r2,0(r2)
    3950:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    3954:	e0bffd17 	ldw	r2,-12(fp)
    3958:	10800403 	ldbu	r2,16(r2)
    395c:	10803fcc 	andi	r2,r2,255
    3960:	10000426 	beq	r2,zero,3974 <alt_tick+0x54>
    3964:	d0a67717 	ldw	r2,-26148(gp)
    3968:	1000021e 	bne	r2,zero,3974 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    396c:	e0bffd17 	ldw	r2,-12(fp)
    3970:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    3974:	e0bffd17 	ldw	r2,-12(fp)
    3978:	10800217 	ldw	r2,8(r2)
    397c:	d0e67717 	ldw	r3,-26148(gp)
    3980:	18801d36 	bltu	r3,r2,39f8 <alt_tick+0xd8>
    3984:	e0bffd17 	ldw	r2,-12(fp)
    3988:	10800403 	ldbu	r2,16(r2)
    398c:	10803fcc 	andi	r2,r2,255
    3990:	1000191e 	bne	r2,zero,39f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    3994:	e0bffd17 	ldw	r2,-12(fp)
    3998:	10800317 	ldw	r2,12(r2)
    399c:	e0fffd17 	ldw	r3,-12(fp)
    39a0:	18c00517 	ldw	r3,20(r3)
    39a4:	1809883a 	mov	r4,r3
    39a8:	103ee83a 	callr	r2
    39ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    39b0:	e0bfff17 	ldw	r2,-4(fp)
    39b4:	1000031e 	bne	r2,zero,39c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    39b8:	e13ffd17 	ldw	r4,-12(fp)
    39bc:	00038840 	call	3884 <alt_alarm_stop>
    39c0:	00000d06 	br	39f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    39c4:	e0bffd17 	ldw	r2,-12(fp)
    39c8:	10c00217 	ldw	r3,8(r2)
    39cc:	e0bfff17 	ldw	r2,-4(fp)
    39d0:	1887883a 	add	r3,r3,r2
    39d4:	e0bffd17 	ldw	r2,-12(fp)
    39d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    39dc:	e0bffd17 	ldw	r2,-12(fp)
    39e0:	10c00217 	ldw	r3,8(r2)
    39e4:	d0a67717 	ldw	r2,-26148(gp)
    39e8:	1880032e 	bgeu	r3,r2,39f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    39ec:	e0bffd17 	ldw	r2,-12(fp)
    39f0:	00c00044 	movi	r3,1
    39f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    39f8:	e0bffe17 	ldw	r2,-8(fp)
    39fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3a00:	e0fffd17 	ldw	r3,-12(fp)
    3a04:	d0a00704 	addi	r2,gp,-32740
    3a08:	18bfcf1e 	bne	r3,r2,3948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003948>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    3a0c:	0001883a 	nop
}
    3a10:	0001883a 	nop
    3a14:	e037883a 	mov	sp,fp
    3a18:	dfc00117 	ldw	ra,4(sp)
    3a1c:	df000017 	ldw	fp,0(sp)
    3a20:	dec00204 	addi	sp,sp,8
    3a24:	f800283a 	ret

00003a28 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    3a28:	deffff04 	addi	sp,sp,-4
    3a2c:	df000015 	stw	fp,0(sp)
    3a30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    3a34:	000170fa 	wrctl	ienable,zero
}
    3a38:	0001883a 	nop
    3a3c:	e037883a 	mov	sp,fp
    3a40:	df000017 	ldw	fp,0(sp)
    3a44:	dec00104 	addi	sp,sp,4
    3a48:	f800283a 	ret

00003a4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    3a4c:	defffb04 	addi	sp,sp,-20
    3a50:	dfc00415 	stw	ra,16(sp)
    3a54:	df000315 	stw	fp,12(sp)
    3a58:	df000304 	addi	fp,sp,12
    3a5c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    3a60:	00800034 	movhi	r2,0
    3a64:	10971704 	addi	r2,r2,23644
    3a68:	10800017 	ldw	r2,0(r2)
    3a6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3a70:	00003106 	br	3b38 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    3a74:	e0bffd17 	ldw	r2,-12(fp)
    3a78:	10800217 	ldw	r2,8(r2)
    3a7c:	1009883a 	mov	r4,r2
    3a80:	0003e080 	call	3e08 <strlen>
    3a84:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    3a88:	e0bffd17 	ldw	r2,-12(fp)
    3a8c:	10c00217 	ldw	r3,8(r2)
    3a90:	e0bffe17 	ldw	r2,-8(fp)
    3a94:	10bfffc4 	addi	r2,r2,-1
    3a98:	1885883a 	add	r2,r3,r2
    3a9c:	10800003 	ldbu	r2,0(r2)
    3aa0:	10803fcc 	andi	r2,r2,255
    3aa4:	1080201c 	xori	r2,r2,128
    3aa8:	10bfe004 	addi	r2,r2,-128
    3aac:	10800bd8 	cmpnei	r2,r2,47
    3ab0:	1000031e 	bne	r2,zero,3ac0 <alt_find_file+0x74>
    {
      len -= 1;
    3ab4:	e0bffe17 	ldw	r2,-8(fp)
    3ab8:	10bfffc4 	addi	r2,r2,-1
    3abc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3ac0:	e0bffe17 	ldw	r2,-8(fp)
    3ac4:	e0ffff17 	ldw	r3,-4(fp)
    3ac8:	1885883a 	add	r2,r3,r2
    3acc:	10800003 	ldbu	r2,0(r2)
    3ad0:	10803fcc 	andi	r2,r2,255
    3ad4:	1080201c 	xori	r2,r2,128
    3ad8:	10bfe004 	addi	r2,r2,-128
    3adc:	10800be0 	cmpeqi	r2,r2,47
    3ae0:	1000081e 	bne	r2,zero,3b04 <alt_find_file+0xb8>
    3ae4:	e0bffe17 	ldw	r2,-8(fp)
    3ae8:	e0ffff17 	ldw	r3,-4(fp)
    3aec:	1885883a 	add	r2,r3,r2
    3af0:	10800003 	ldbu	r2,0(r2)
    3af4:	10803fcc 	andi	r2,r2,255
    3af8:	1080201c 	xori	r2,r2,128
    3afc:	10bfe004 	addi	r2,r2,-128
    3b00:	10000a1e 	bne	r2,zero,3b2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    3b04:	e0bffd17 	ldw	r2,-12(fp)
    3b08:	10800217 	ldw	r2,8(r2)
    3b0c:	e0fffe17 	ldw	r3,-8(fp)
    3b10:	180d883a 	mov	r6,r3
    3b14:	e17fff17 	ldw	r5,-4(fp)
    3b18:	1009883a 	mov	r4,r2
    3b1c:	0003d8c0 	call	3d8c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3b20:	1000021e 	bne	r2,zero,3b2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    3b24:	e0bffd17 	ldw	r2,-12(fp)
    3b28:	00000806 	br	3b4c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    3b2c:	e0bffd17 	ldw	r2,-12(fp)
    3b30:	10800017 	ldw	r2,0(r2)
    3b34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3b38:	e0fffd17 	ldw	r3,-12(fp)
    3b3c:	00800034 	movhi	r2,0
    3b40:	10971704 	addi	r2,r2,23644
    3b44:	18bfcb1e 	bne	r3,r2,3a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    3b48:	0005883a 	mov	r2,zero
}
    3b4c:	e037883a 	mov	sp,fp
    3b50:	dfc00117 	ldw	ra,4(sp)
    3b54:	df000017 	ldw	fp,0(sp)
    3b58:	dec00204 	addi	sp,sp,8
    3b5c:	f800283a 	ret

00003b60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    3b60:	defffc04 	addi	sp,sp,-16
    3b64:	df000315 	stw	fp,12(sp)
    3b68:	df000304 	addi	fp,sp,12
    3b6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    3b70:	00bffa04 	movi	r2,-24
    3b74:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3b78:	e03ffd15 	stw	zero,-12(fp)
    3b7c:	00001d06 	br	3bf4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    3b80:	00800034 	movhi	r2,0
    3b84:	1095ad04 	addi	r2,r2,22196
    3b88:	e0fffd17 	ldw	r3,-12(fp)
    3b8c:	18c00324 	muli	r3,r3,12
    3b90:	10c5883a 	add	r2,r2,r3
    3b94:	10800017 	ldw	r2,0(r2)
    3b98:	1000131e 	bne	r2,zero,3be8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    3b9c:	00800034 	movhi	r2,0
    3ba0:	1095ad04 	addi	r2,r2,22196
    3ba4:	e0fffd17 	ldw	r3,-12(fp)
    3ba8:	18c00324 	muli	r3,r3,12
    3bac:	10c5883a 	add	r2,r2,r3
    3bb0:	e0ffff17 	ldw	r3,-4(fp)
    3bb4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    3bb8:	00800034 	movhi	r2,0
    3bbc:	10971b04 	addi	r2,r2,23660
    3bc0:	10c00017 	ldw	r3,0(r2)
    3bc4:	e0bffd17 	ldw	r2,-12(fp)
    3bc8:	1880040e 	bge	r3,r2,3bdc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    3bcc:	00800034 	movhi	r2,0
    3bd0:	10971b04 	addi	r2,r2,23660
    3bd4:	e0fffd17 	ldw	r3,-12(fp)
    3bd8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    3bdc:	e0bffd17 	ldw	r2,-12(fp)
    3be0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    3be4:	00000606 	br	3c00 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3be8:	e0bffd17 	ldw	r2,-12(fp)
    3bec:	10800044 	addi	r2,r2,1
    3bf0:	e0bffd15 	stw	r2,-12(fp)
    3bf4:	e0bffd17 	ldw	r2,-12(fp)
    3bf8:	10800810 	cmplti	r2,r2,32
    3bfc:	103fe01e 	bne	r2,zero,3b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b80>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    3c00:	e0bffe17 	ldw	r2,-8(fp)
}
    3c04:	e037883a 	mov	sp,fp
    3c08:	df000017 	ldw	fp,0(sp)
    3c0c:	dec00104 	addi	sp,sp,4
    3c10:	f800283a 	ret

00003c14 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    3c14:	defffb04 	addi	sp,sp,-20
    3c18:	df000415 	stw	fp,16(sp)
    3c1c:	df000404 	addi	fp,sp,16
    3c20:	e13ffe15 	stw	r4,-8(fp)
    3c24:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    3c28:	e0bfff17 	ldw	r2,-4(fp)
    3c2c:	10840070 	cmpltui	r2,r2,4097
    3c30:	1000021e 	bne	r2,zero,3c3c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    3c34:	00840004 	movi	r2,4096
    3c38:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    3c3c:	e0fffe17 	ldw	r3,-8(fp)
    3c40:	e0bfff17 	ldw	r2,-4(fp)
    3c44:	1885883a 	add	r2,r3,r2
    3c48:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3c4c:	e0bffe17 	ldw	r2,-8(fp)
    3c50:	e0bffc15 	stw	r2,-16(fp)
    3c54:	00000506 	br	3c6c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    3c58:	e0bffc17 	ldw	r2,-16(fp)
    3c5c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3c60:	e0bffc17 	ldw	r2,-16(fp)
    3c64:	10800804 	addi	r2,r2,32
    3c68:	e0bffc15 	stw	r2,-16(fp)
    3c6c:	e0fffc17 	ldw	r3,-16(fp)
    3c70:	e0bffd17 	ldw	r2,-12(fp)
    3c74:	18bff836 	bltu	r3,r2,3c58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c58>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    3c78:	e0bffe17 	ldw	r2,-8(fp)
    3c7c:	108007cc 	andi	r2,r2,31
    3c80:	10000226 	beq	r2,zero,3c8c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    3c84:	e0bffc17 	ldw	r2,-16(fp)
    3c88:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    3c8c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    3c90:	0001883a 	nop
    3c94:	e037883a 	mov	sp,fp
    3c98:	df000017 	ldw	fp,0(sp)
    3c9c:	dec00104 	addi	sp,sp,4
    3ca0:	f800283a 	ret

00003ca4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    3ca4:	defffe04 	addi	sp,sp,-8
    3ca8:	df000115 	stw	fp,4(sp)
    3cac:	df000104 	addi	fp,sp,4
    3cb0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    3cb4:	e0bfff17 	ldw	r2,-4(fp)
    3cb8:	10bffe84 	addi	r2,r2,-6
    3cbc:	10c00428 	cmpgeui	r3,r2,16
    3cc0:	18001a1e 	bne	r3,zero,3d2c <alt_exception_cause_generated_bad_addr+0x88>
    3cc4:	100690ba 	slli	r3,r2,2
    3cc8:	00800034 	movhi	r2,0
    3ccc:	108f3704 	addi	r2,r2,15580
    3cd0:	1885883a 	add	r2,r3,r2
    3cd4:	10800017 	ldw	r2,0(r2)
    3cd8:	1000683a 	jmp	r2
    3cdc:	00003d1c 	xori	zero,zero,244
    3ce0:	00003d1c 	xori	zero,zero,244
    3ce4:	00003d2c 	andhi	zero,zero,244
    3ce8:	00003d2c 	andhi	zero,zero,244
    3cec:	00003d2c 	andhi	zero,zero,244
    3cf0:	00003d1c 	xori	zero,zero,244
    3cf4:	00003d24 	muli	zero,zero,244
    3cf8:	00003d2c 	andhi	zero,zero,244
    3cfc:	00003d1c 	xori	zero,zero,244
    3d00:	00003d1c 	xori	zero,zero,244
    3d04:	00003d2c 	andhi	zero,zero,244
    3d08:	00003d1c 	xori	zero,zero,244
    3d0c:	00003d24 	muli	zero,zero,244
    3d10:	00003d2c 	andhi	zero,zero,244
    3d14:	00003d2c 	andhi	zero,zero,244
    3d18:	00003d1c 	xori	zero,zero,244
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    3d1c:	00800044 	movi	r2,1
    3d20:	00000306 	br	3d30 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    3d24:	0005883a 	mov	r2,zero
    3d28:	00000106 	br	3d30 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    3d2c:	0005883a 	mov	r2,zero
  }
}
    3d30:	e037883a 	mov	sp,fp
    3d34:	df000017 	ldw	fp,0(sp)
    3d38:	dec00104 	addi	sp,sp,4
    3d3c:	f800283a 	ret

00003d40 <atexit>:
    3d40:	200b883a 	mov	r5,r4
    3d44:	000f883a 	mov	r7,zero
    3d48:	000d883a 	mov	r6,zero
    3d4c:	0009883a 	mov	r4,zero
    3d50:	0003ea01 	jmpi	3ea0 <__register_exitproc>

00003d54 <exit>:
    3d54:	defffe04 	addi	sp,sp,-8
    3d58:	000b883a 	mov	r5,zero
    3d5c:	dc000015 	stw	r16,0(sp)
    3d60:	dfc00115 	stw	ra,4(sp)
    3d64:	2021883a 	mov	r16,r4
    3d68:	0003fb80 	call	3fb8 <__call_exitprocs>
    3d6c:	00800034 	movhi	r2,0
    3d70:	10971f04 	addi	r2,r2,23676
    3d74:	11000017 	ldw	r4,0(r2)
    3d78:	20800f17 	ldw	r2,60(r4)
    3d7c:	10000126 	beq	r2,zero,3d84 <exit+0x30>
    3d80:	103ee83a 	callr	r2
    3d84:	8009883a 	mov	r4,r16
    3d88:	00041380 	call	4138 <_exit>

00003d8c <memcmp>:
    3d8c:	01c000c4 	movi	r7,3
    3d90:	3980192e 	bgeu	r7,r6,3df8 <memcmp+0x6c>
    3d94:	2144b03a 	or	r2,r4,r5
    3d98:	11c4703a 	and	r2,r2,r7
    3d9c:	10000f26 	beq	r2,zero,3ddc <memcmp+0x50>
    3da0:	20800003 	ldbu	r2,0(r4)
    3da4:	28c00003 	ldbu	r3,0(r5)
    3da8:	10c0151e 	bne	r2,r3,3e00 <memcmp+0x74>
    3dac:	31bfff84 	addi	r6,r6,-2
    3db0:	01ffffc4 	movi	r7,-1
    3db4:	00000406 	br	3dc8 <memcmp+0x3c>
    3db8:	20800003 	ldbu	r2,0(r4)
    3dbc:	28c00003 	ldbu	r3,0(r5)
    3dc0:	31bfffc4 	addi	r6,r6,-1
    3dc4:	10c00e1e 	bne	r2,r3,3e00 <memcmp+0x74>
    3dc8:	21000044 	addi	r4,r4,1
    3dcc:	29400044 	addi	r5,r5,1
    3dd0:	31fff91e 	bne	r6,r7,3db8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003db8>
    3dd4:	0005883a 	mov	r2,zero
    3dd8:	f800283a 	ret
    3ddc:	20c00017 	ldw	r3,0(r4)
    3de0:	28800017 	ldw	r2,0(r5)
    3de4:	18bfee1e 	bne	r3,r2,3da0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003da0>
    3de8:	31bfff04 	addi	r6,r6,-4
    3dec:	21000104 	addi	r4,r4,4
    3df0:	29400104 	addi	r5,r5,4
    3df4:	39bff936 	bltu	r7,r6,3ddc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ddc>
    3df8:	303fe91e 	bne	r6,zero,3da0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003da0>
    3dfc:	003ff506 	br	3dd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003dd4>
    3e00:	10c5c83a 	sub	r2,r2,r3
    3e04:	f800283a 	ret

00003e08 <strlen>:
    3e08:	208000cc 	andi	r2,r4,3
    3e0c:	10002026 	beq	r2,zero,3e90 <strlen+0x88>
    3e10:	20800007 	ldb	r2,0(r4)
    3e14:	10002026 	beq	r2,zero,3e98 <strlen+0x90>
    3e18:	2005883a 	mov	r2,r4
    3e1c:	00000206 	br	3e28 <strlen+0x20>
    3e20:	10c00007 	ldb	r3,0(r2)
    3e24:	18001826 	beq	r3,zero,3e88 <strlen+0x80>
    3e28:	10800044 	addi	r2,r2,1
    3e2c:	10c000cc 	andi	r3,r2,3
    3e30:	183ffb1e 	bne	r3,zero,3e20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e20>
    3e34:	10c00017 	ldw	r3,0(r2)
    3e38:	01ffbff4 	movhi	r7,65279
    3e3c:	39ffbfc4 	addi	r7,r7,-257
    3e40:	00ca303a 	nor	r5,zero,r3
    3e44:	01a02074 	movhi	r6,32897
    3e48:	19c7883a 	add	r3,r3,r7
    3e4c:	31a02004 	addi	r6,r6,-32640
    3e50:	1946703a 	and	r3,r3,r5
    3e54:	1986703a 	and	r3,r3,r6
    3e58:	1800091e 	bne	r3,zero,3e80 <strlen+0x78>
    3e5c:	10800104 	addi	r2,r2,4
    3e60:	10c00017 	ldw	r3,0(r2)
    3e64:	19cb883a 	add	r5,r3,r7
    3e68:	00c6303a 	nor	r3,zero,r3
    3e6c:	28c6703a 	and	r3,r5,r3
    3e70:	1986703a 	and	r3,r3,r6
    3e74:	183ff926 	beq	r3,zero,3e5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e5c>
    3e78:	00000106 	br	3e80 <strlen+0x78>
    3e7c:	10800044 	addi	r2,r2,1
    3e80:	10c00007 	ldb	r3,0(r2)
    3e84:	183ffd1e 	bne	r3,zero,3e7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e7c>
    3e88:	1105c83a 	sub	r2,r2,r4
    3e8c:	f800283a 	ret
    3e90:	2005883a 	mov	r2,r4
    3e94:	003fe706 	br	3e34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e34>
    3e98:	0005883a 	mov	r2,zero
    3e9c:	f800283a 	ret

00003ea0 <__register_exitproc>:
    3ea0:	defffa04 	addi	sp,sp,-24
    3ea4:	dc000315 	stw	r16,12(sp)
    3ea8:	04000034 	movhi	r16,0
    3eac:	84171f04 	addi	r16,r16,23676
    3eb0:	80c00017 	ldw	r3,0(r16)
    3eb4:	dc400415 	stw	r17,16(sp)
    3eb8:	dfc00515 	stw	ra,20(sp)
    3ebc:	18805217 	ldw	r2,328(r3)
    3ec0:	2023883a 	mov	r17,r4
    3ec4:	10003726 	beq	r2,zero,3fa4 <__register_exitproc+0x104>
    3ec8:	10c00117 	ldw	r3,4(r2)
    3ecc:	010007c4 	movi	r4,31
    3ed0:	20c00e16 	blt	r4,r3,3f0c <__register_exitproc+0x6c>
    3ed4:	1a000044 	addi	r8,r3,1
    3ed8:	8800221e 	bne	r17,zero,3f64 <__register_exitproc+0xc4>
    3edc:	18c00084 	addi	r3,r3,2
    3ee0:	18c7883a 	add	r3,r3,r3
    3ee4:	18c7883a 	add	r3,r3,r3
    3ee8:	12000115 	stw	r8,4(r2)
    3eec:	10c7883a 	add	r3,r2,r3
    3ef0:	19400015 	stw	r5,0(r3)
    3ef4:	0005883a 	mov	r2,zero
    3ef8:	dfc00517 	ldw	ra,20(sp)
    3efc:	dc400417 	ldw	r17,16(sp)
    3f00:	dc000317 	ldw	r16,12(sp)
    3f04:	dec00604 	addi	sp,sp,24
    3f08:	f800283a 	ret
    3f0c:	00800034 	movhi	r2,0
    3f10:	10800004 	addi	r2,r2,0
    3f14:	10002626 	beq	r2,zero,3fb0 <__register_exitproc+0x110>
    3f18:	01006404 	movi	r4,400
    3f1c:	d9400015 	stw	r5,0(sp)
    3f20:	d9800115 	stw	r6,4(sp)
    3f24:	d9c00215 	stw	r7,8(sp)
    3f28:	00000000 	call	0 <__reset>
    3f2c:	d9400017 	ldw	r5,0(sp)
    3f30:	d9800117 	ldw	r6,4(sp)
    3f34:	d9c00217 	ldw	r7,8(sp)
    3f38:	10001d26 	beq	r2,zero,3fb0 <__register_exitproc+0x110>
    3f3c:	81000017 	ldw	r4,0(r16)
    3f40:	10000115 	stw	zero,4(r2)
    3f44:	02000044 	movi	r8,1
    3f48:	22405217 	ldw	r9,328(r4)
    3f4c:	0007883a 	mov	r3,zero
    3f50:	12400015 	stw	r9,0(r2)
    3f54:	20805215 	stw	r2,328(r4)
    3f58:	10006215 	stw	zero,392(r2)
    3f5c:	10006315 	stw	zero,396(r2)
    3f60:	883fde26 	beq	r17,zero,3edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003edc>
    3f64:	18c9883a 	add	r4,r3,r3
    3f68:	2109883a 	add	r4,r4,r4
    3f6c:	1109883a 	add	r4,r2,r4
    3f70:	21802215 	stw	r6,136(r4)
    3f74:	01800044 	movi	r6,1
    3f78:	12406217 	ldw	r9,392(r2)
    3f7c:	30cc983a 	sll	r6,r6,r3
    3f80:	4992b03a 	or	r9,r9,r6
    3f84:	12406215 	stw	r9,392(r2)
    3f88:	21c04215 	stw	r7,264(r4)
    3f8c:	01000084 	movi	r4,2
    3f90:	893fd21e 	bne	r17,r4,3edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003edc>
    3f94:	11006317 	ldw	r4,396(r2)
    3f98:	218cb03a 	or	r6,r4,r6
    3f9c:	11806315 	stw	r6,396(r2)
    3fa0:	003fce06 	br	3edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003edc>
    3fa4:	18805304 	addi	r2,r3,332
    3fa8:	18805215 	stw	r2,328(r3)
    3fac:	003fc606 	br	3ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ec8>
    3fb0:	00bfffc4 	movi	r2,-1
    3fb4:	003fd006 	br	3ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ef8>

00003fb8 <__call_exitprocs>:
    3fb8:	defff504 	addi	sp,sp,-44
    3fbc:	df000915 	stw	fp,36(sp)
    3fc0:	dd400615 	stw	r21,24(sp)
    3fc4:	dc800315 	stw	r18,12(sp)
    3fc8:	dfc00a15 	stw	ra,40(sp)
    3fcc:	ddc00815 	stw	r23,32(sp)
    3fd0:	dd800715 	stw	r22,28(sp)
    3fd4:	dd000515 	stw	r20,20(sp)
    3fd8:	dcc00415 	stw	r19,16(sp)
    3fdc:	dc400215 	stw	r17,8(sp)
    3fe0:	dc000115 	stw	r16,4(sp)
    3fe4:	d9000015 	stw	r4,0(sp)
    3fe8:	2839883a 	mov	fp,r5
    3fec:	04800044 	movi	r18,1
    3ff0:	057fffc4 	movi	r21,-1
    3ff4:	00800034 	movhi	r2,0
    3ff8:	10971f04 	addi	r2,r2,23676
    3ffc:	12000017 	ldw	r8,0(r2)
    4000:	45005217 	ldw	r20,328(r8)
    4004:	44c05204 	addi	r19,r8,328
    4008:	a0001c26 	beq	r20,zero,407c <__call_exitprocs+0xc4>
    400c:	a0800117 	ldw	r2,4(r20)
    4010:	15ffffc4 	addi	r23,r2,-1
    4014:	b8000d16 	blt	r23,zero,404c <__call_exitprocs+0x94>
    4018:	14000044 	addi	r16,r2,1
    401c:	8421883a 	add	r16,r16,r16
    4020:	8421883a 	add	r16,r16,r16
    4024:	84402004 	addi	r17,r16,128
    4028:	a463883a 	add	r17,r20,r17
    402c:	a421883a 	add	r16,r20,r16
    4030:	e0001e26 	beq	fp,zero,40ac <__call_exitprocs+0xf4>
    4034:	80804017 	ldw	r2,256(r16)
    4038:	e0801c26 	beq	fp,r2,40ac <__call_exitprocs+0xf4>
    403c:	bdffffc4 	addi	r23,r23,-1
    4040:	843fff04 	addi	r16,r16,-4
    4044:	8c7fff04 	addi	r17,r17,-4
    4048:	bd7ff91e 	bne	r23,r21,4030 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004030>
    404c:	00800034 	movhi	r2,0
    4050:	10800004 	addi	r2,r2,0
    4054:	10000926 	beq	r2,zero,407c <__call_exitprocs+0xc4>
    4058:	a0800117 	ldw	r2,4(r20)
    405c:	1000301e 	bne	r2,zero,4120 <__call_exitprocs+0x168>
    4060:	a0800017 	ldw	r2,0(r20)
    4064:	10003226 	beq	r2,zero,4130 <__call_exitprocs+0x178>
    4068:	a009883a 	mov	r4,r20
    406c:	98800015 	stw	r2,0(r19)
    4070:	00000000 	call	0 <__reset>
    4074:	9d000017 	ldw	r20,0(r19)
    4078:	a03fe41e 	bne	r20,zero,400c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700400c>
    407c:	dfc00a17 	ldw	ra,40(sp)
    4080:	df000917 	ldw	fp,36(sp)
    4084:	ddc00817 	ldw	r23,32(sp)
    4088:	dd800717 	ldw	r22,28(sp)
    408c:	dd400617 	ldw	r21,24(sp)
    4090:	dd000517 	ldw	r20,20(sp)
    4094:	dcc00417 	ldw	r19,16(sp)
    4098:	dc800317 	ldw	r18,12(sp)
    409c:	dc400217 	ldw	r17,8(sp)
    40a0:	dc000117 	ldw	r16,4(sp)
    40a4:	dec00b04 	addi	sp,sp,44
    40a8:	f800283a 	ret
    40ac:	a0800117 	ldw	r2,4(r20)
    40b0:	80c00017 	ldw	r3,0(r16)
    40b4:	10bfffc4 	addi	r2,r2,-1
    40b8:	15c01426 	beq	r2,r23,410c <__call_exitprocs+0x154>
    40bc:	80000015 	stw	zero,0(r16)
    40c0:	183fde26 	beq	r3,zero,403c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700403c>
    40c4:	95c8983a 	sll	r4,r18,r23
    40c8:	a0806217 	ldw	r2,392(r20)
    40cc:	a5800117 	ldw	r22,4(r20)
    40d0:	2084703a 	and	r2,r4,r2
    40d4:	10000b26 	beq	r2,zero,4104 <__call_exitprocs+0x14c>
    40d8:	a0806317 	ldw	r2,396(r20)
    40dc:	2088703a 	and	r4,r4,r2
    40e0:	20000c1e 	bne	r4,zero,4114 <__call_exitprocs+0x15c>
    40e4:	89400017 	ldw	r5,0(r17)
    40e8:	d9000017 	ldw	r4,0(sp)
    40ec:	183ee83a 	callr	r3
    40f0:	a0800117 	ldw	r2,4(r20)
    40f4:	15bfbf1e 	bne	r2,r22,3ff4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ff4>
    40f8:	98800017 	ldw	r2,0(r19)
    40fc:	153fcf26 	beq	r2,r20,403c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700403c>
    4100:	003fbc06 	br	3ff4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ff4>
    4104:	183ee83a 	callr	r3
    4108:	003ff906 	br	40f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040f0>
    410c:	a5c00115 	stw	r23,4(r20)
    4110:	003feb06 	br	40c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040c0>
    4114:	89000017 	ldw	r4,0(r17)
    4118:	183ee83a 	callr	r3
    411c:	003ff406 	br	40f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040f0>
    4120:	a0800017 	ldw	r2,0(r20)
    4124:	a027883a 	mov	r19,r20
    4128:	1029883a 	mov	r20,r2
    412c:	003fb606 	br	4008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004008>
    4130:	0005883a 	mov	r2,zero
    4134:	003ffb06 	br	4124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004124>

00004138 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    4138:	defffd04 	addi	sp,sp,-12
    413c:	df000215 	stw	fp,8(sp)
    4140:	df000204 	addi	fp,sp,8
    4144:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    4148:	0001883a 	nop
    414c:	e0bfff17 	ldw	r2,-4(fp)
    4150:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    4154:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4158:	10000226 	beq	r2,zero,4164 <_exit+0x2c>
    ALT_SIM_FAIL();
    415c:	002af070 	cmpltui	zero,zero,43969
    4160:	00000106 	br	4168 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    4164:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4168:	003fff06 	br	4168 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004168>
